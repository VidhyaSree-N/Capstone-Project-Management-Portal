"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Context = _interopRequireDefault(require("./Context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var runUpdate = function runUpdate(registration) {
  try {
    if (registration) {
      registration.waiting.postMessage({
        type: 'SKIP_WAITING'
      });
    }

    if (window.update) {
      window.update && window.update();
    }
  } catch (error) {
    console.log(error);
  }
};

var Provider = function Provider(_ref) {
  var children = _ref.children,
      checkInterval = _ref.checkInterval;

  var _useState = (0, _react.useState)(false),
      isUpdateAvailable = _useState[0],
      setUpdateAvailable = _useState[1];

  var checkUpdate = function checkUpdate() {
    if (window.update) {
      setUpdateAvailable(true);
    } else {
      setUpdateAvailable(false);
      setTimeout(checkUpdate, checkInterval);
    }
  };

  (0, _react.useEffect)(checkUpdate, [checkUpdate]);
  return /*#__PURE__*/_react["default"].createElement(_Context["default"].Provider, {
    value: {
      isUpdateAvailable: isUpdateAvailable,
      runUpdate: runUpdate
    }
  }, children);
};

var _default = Provider;
exports["default"] = _default;
module.exports = exports.default;