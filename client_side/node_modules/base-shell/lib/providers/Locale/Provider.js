"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Context = _interopRequireDefault(require("./Context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Provider = function Provider(_ref) {
  var children = _ref.children,
      _ref$defaultLocale = _ref.defaultLocale,
      defaultLocale = _ref$defaultLocale === void 0 ? 'en' : _ref$defaultLocale,
      _ref$persistKey = _ref.persistKey,
      persistKey = _ref$persistKey === void 0 ? 'locale' : _ref$persistKey;
  var persistLocale = localStorage.getItem(persistKey);

  var _useState = (0, _react.useState)(persistLocale || defaultLocale),
      locale = _useState[0],
      setLocale = _useState[1];

  (0, _react.useEffect)(function () {
    try {
      localStorage.setItem(persistKey, locale);
    } catch (error) {
      console.warn(error);
    }
  }, [locale, persistKey]);
  return /*#__PURE__*/_react["default"].createElement(_Context["default"].Provider, {
    value: {
      locale: locale,
      setLocale: setLocale
    }
  }, children);
};

var _default = Provider;
exports["default"] = _default;
module.exports = exports.default;