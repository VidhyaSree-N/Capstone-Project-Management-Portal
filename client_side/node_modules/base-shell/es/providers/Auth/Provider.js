function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useEffect, useReducer } from 'react';
import Context from './Context';

function reducer(state, action) {
  var type = action.type,
      auth = action.auth;

  switch (type) {
    case 'SET_AUTH':
      return auth;

    case 'UPDATE_AUTH':
      return _extends({}, state, auth);

    default:
      throw new Error();
  }
}

var Provider = function Provider(_ref) {
  var _ref$persistKey = _ref.persistKey,
      persistKey = _ref$persistKey === void 0 ? 'auth' : _ref$persistKey,
      children = _ref.children;
  var persistAuth = JSON.parse(localStorage.getItem(persistKey));

  var _useReducer = useReducer(reducer, persistAuth || {}),
      auth = _useReducer[0],
      dispatch = _useReducer[1];

  useEffect(function () {
    try {
      localStorage.setItem(persistKey, JSON.stringify(auth));
    } catch (error) {
      console.warn(error);
    }
  }, [auth, persistKey]);

  var setAuth = function setAuth(auth) {
    dispatch({
      type: 'SET_AUTH',
      auth: auth
    });
  };

  var updateAuth = function updateAuth(auth) {
    dispatch({
      type: 'UPDATE_AUTH',
      auth: auth
    });
  };

  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: {
      auth: auth,
      setAuth: setAuth,
      updateAuth: updateAuth
    }
  }, children);
};

export default Provider;