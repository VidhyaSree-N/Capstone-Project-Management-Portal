function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState } from 'react';
import Context from './Context';
var initialState = {
  deferredPrompt: function deferredPrompt() {},
  isAppInstallable: false,
  isAppInstalled: false
};

var Provider = function Provider(_ref) {
  var children = _ref.children;

  var _useState = useState(initialState),
      state = _useState[0],
      setA2HPState = _useState[1];

  window.addEventListener('beforeinstallprompt', function (e) {
    // Prevent Chrome 67 and earlier from automatically showing the prompt
    e.preventDefault(); // Stash the event so it can be triggered later.

    setA2HPState({
      deferredPrompt: e,
      isAppInstallable: true
    });
  });
  window.addEventListener('appinstalled', function (evt) {
    setA2HPState({
      isAppInstalled: true
    });
  });
  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: _extends({}, state, {
      setA2HPState: setA2HPState
    })
  }, children);
};

export default Provider;