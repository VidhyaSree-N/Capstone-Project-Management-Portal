function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useEffect, useReducer } from 'react';
import Context from './Context';

function reducer(state, action) {
  var _extends2;

  var type = action.type,
      key = action.key,
      value = action.value,
      persist = action.persist;

  switch (type) {
    case 'add':
      return _extends({}, state, (_extends2 = {}, _extends2[key] = {
        value: value,
        persist: persist
      }, _extends2));

    case 'clear':
      var clearedKey = state[key],
          rest = _objectWithoutPropertiesLoose(state, [key].map(_toPropertyKey));

      return _extends({}, rest);

    case 'clear_all':
      return {};

    default:
      throw new Error();
  }
}

function getInitState(persistKey) {
  var persistedValues = {};

  try {
    persistedValues = JSON.parse(localStorage.getItem(persistKey)) || {};
  } catch (error) {
    console.warn(error);
  }

  return persistedValues;
}

var Provider = function Provider(_ref) {
  var children = _ref.children,
      _ref$persistKey = _ref.persistKey,
      persistKey = _ref$persistKey === void 0 ? 'simple_values' : _ref$persistKey;

  var _useReducer = useReducer(reducer, getInitState(persistKey)),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  useEffect(function () {
    try {
      var persistValues = {};
      Object.keys(state).map(function (k) {
        if (state[k].persist) {
          persistValues[k] = {
            value: state[k].value,
            persist: true
          };
        }

        return k;
      });
      localStorage.setItem(persistKey, JSON.stringify(persistValues));
    } catch (error) {
      console.warn(error);
    }
  }, [state, persistKey]);

  var setValue = function setValue(key, value, persist) {
    if (persist === void 0) {
      persist = false;
    }

    dispatch({
      type: 'add',
      key: key,
      value: value,
      persist: persist
    });
  };

  var getValue = function getValue(key, defaultValue) {
    if (state[key] !== undefined) {
      return state[key].value;
    } else {
      return defaultValue;
    }
  };

  var clearValue = function clearValue(key) {
    dispatch({
      type: 'clear',
      key: key
    });
  };

  var clearAll = function clearAll() {
    dispatch({
      type: 'clear_all'
    });
  };

  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: {
      setValue: setValue,
      getValue: getValue,
      clearValue: clearValue,
      clearAll: clearAll
    }
  }, children);
};

export default Provider;