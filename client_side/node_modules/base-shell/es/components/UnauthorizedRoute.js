var _excluded = ["children", "redirectTo"];

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import { Navigate } from "react-router-dom";
import { useAuth } from "../providers/Auth";
import { useConfig } from "../providers/Config";
import { useLocation } from "react-router-dom";

function UnauthorizedRoute(_ref) {
  var children = _ref.children,
      _ref$redirectTo = _ref.redirectTo,
      redirectTo = _ref$redirectTo === void 0 ? "/" : _ref$redirectTo,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded);

  var _useConfig = useConfig(),
      appConfig = _useConfig.appConfig;

  var location = useLocation();

  var _ref2 = appConfig || {},
      authConfig = _ref2.auth;

  var _ref3 = authConfig || {},
      _ref3$redirectTo = _ref3.redirectTo,
      _redirectTo = _ref3$redirectTo === void 0 ? redirectTo : _ref3$redirectTo;

  var _useAuth = useAuth(),
      auth = _useAuth.auth;

  var from = new URLSearchParams(location.search).get("from") || _redirectTo;

  if (!auth.isAuthenticated) {
    return children;
  } else {
    return /*#__PURE__*/React.createElement(Navigate, {
      to: from,
      replace: true
    });
  }
}

export default UnauthorizedRoute;