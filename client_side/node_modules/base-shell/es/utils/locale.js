import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

//import areIntlLocalesSupported from 'intl-locales-supported'
//import intl from 'intl'
import { defineMessages } from 'react-intl';
/*
const loadLocalePolyfill = (locale) => {
  // START: Intl polyfill
  // Required for working on Safari
  // Code from here: https://formatjs.io/guides/runtime-environments/
  let localesMyAppSupports = [locale]

  if (global.Intl) {
    // Determine if the built-in `Intl` has the locale data we need.
    if (!areIntlLocalesSupported(localesMyAppSupports)) {
      // `Intl` exists, but it doesn't have the data we need, so load the
      // polyfill and replace the constructors with need with the polyfill's.
      let IntlPolyfill = intl
      Intl.NumberFormat = IntlPolyfill.NumberFormat
      Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat
    }
  } else {
    // No `Intl`, so use and load the polyfill.
    global.Intl = intl
  }
  // END: Intl polyfill
}
*/

var getUsersPreferredLanguages = function getUsersPreferredLanguages() {
  if (navigator.languages !== undefined) {
    return navigator.languages;
  } else if (navigator.language !== undefined) {
    return [navigator.language];
  } else {
    return undefined;
  }
};

var parseLanguages = function parseLanguages(acceptedLangs, defaultLang) {
  if (defaultLang === void 0) {
    defaultLang = false;
  }

  var userPref = getUsersPreferredLanguages();
  var match = userPref ? userPref.find(function (lang) {
    return acceptedLangs.includes(lang);
  }) : undefined;

  if (match === undefined && defaultLang !== false) {
    return defaultLang;
  }

  return match;
};

var getLocaleMessages = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(l, ls) {
    var i, _yield$defineMessages, messages;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!ls) {
              _context.next = 12;
              break;
            }

            i = 0;

          case 2:
            if (!(i < ls.length)) {
              _context.next = 12;
              break;
            }

            if (!(ls[i]['locale'] === l)) {
              _context.next = 9;
              break;
            }

            _context.next = 6;
            return defineMessages(ls[i].messages);

          case 6:
            _yield$defineMessages = _context.sent;
            messages = _yield$defineMessages["default"];
            return _context.abrupt("return", messages);

          case 9:
            i++;
            _context.next = 2;
            break;

          case 12:
            return _context.abrupt("return", {});

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getLocaleMessages(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var formatMessage = function formatMessage(messages, id) {
  if (messages === void 0) {
    messages = [];
  }

  return messages[id] || id;
};

export { formatMessage, getLocaleMessages //loadLocalePolyfill
};
export default parseLanguages;