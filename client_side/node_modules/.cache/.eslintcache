[{"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\index.js":"1","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\App.js":"2","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\HomePage.js":"3","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\PageNotFound.js":"4","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\SigninPage.js":"5","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\ForgotPasswordPage.js":"6","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\DashBoardPage.js":"7","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\Test.js":"8","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\CoursesPage.js":"9","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\CoursePage.js":"10","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\ProjectPage.js":"11","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\PreferenceForm.js":"12","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\StudentCoursePage.js":"13","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\Footer\\footer.js":"14","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\AdminCousesPage.js":"15","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\Dashboard\\AdminDashboard.js":"16","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forgot-my-password\\noteCheckYourEmail.js":"17","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forgot-my-password\\formResetPassword.js":"18","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\Dashboard\\ClientDashboard.js":"19","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\CoursesProjects.js":"20","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\StudentCoursesPage.js":"21","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\project\\PublishProjects.js":"22","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\project\\PendingProjects.js":"23","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\CoursesAssignment.js":"24","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\CoursesStudents.js":"25","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\project\\ActiveProjects.js":"26","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\Header\\navbar.js":"27","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\ConfimationPopup.js":"28","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\project\\ProjectPreview.js":"29","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\CreateCourseForm.js":"30","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\PublishProjectForm.js":"31","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\SelectProjectsForCourse.js":"32","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\InviteClients.js":"33","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\CSVUploader.js":"34","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\InviteStudents.js":"35","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\stages\\StageOne.js":"36","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\stages\\StageTwo.js":"37","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\stages\\StageThree.js":"38","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\AutoAssignForm.js":"39","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\ErrorMessagePopup.js":"40"},{"size":169,"mtime":1695788406899,"results":"41","hashOfConfig":"42"},{"size":2357,"mtime":1695788406844,"results":"43","hashOfConfig":"42"},{"size":2289,"mtime":1695788406901,"results":"44","hashOfConfig":"42"},{"size":134,"mtime":1695788406901,"results":"45","hashOfConfig":"42"},{"size":6120,"mtime":1695788406902,"results":"46","hashOfConfig":"42"},{"size":497,"mtime":1695788406901,"results":"47","hashOfConfig":"42"},{"size":845,"mtime":1695788406901,"results":"48","hashOfConfig":"42"},{"size":134,"mtime":1695788406903,"results":"49","hashOfConfig":"42"},{"size":1342,"mtime":1695788406900,"results":"50","hashOfConfig":"42"},{"size":3438,"mtime":1695788406900,"results":"51","hashOfConfig":"42"},{"size":2176,"mtime":1695788406902,"results":"52","hashOfConfig":"42"},{"size":4368,"mtime":1695788406895,"results":"53","hashOfConfig":"42"},{"size":8348,"mtime":1697321731142,"results":"54","hashOfConfig":"42"},{"size":2094,"mtime":1695788406886,"results":"55","hashOfConfig":"42"},{"size":9718,"mtime":1697313906024,"results":"56","hashOfConfig":"42"},{"size":197,"mtime":1695788406885,"results":"57","hashOfConfig":"42"},{"size":3263,"mtime":1695788406891,"results":"58","hashOfConfig":"42"},{"size":5155,"mtime":1695788406890,"results":"59","hashOfConfig":"42"},{"size":8024,"mtime":1697321602770,"results":"60","hashOfConfig":"42"},{"size":9382,"mtime":1697322245411,"results":"61","hashOfConfig":"42"},{"size":7763,"mtime":1697322606191,"results":"62","hashOfConfig":"42"},{"size":9913,"mtime":1697321842563,"results":"63","hashOfConfig":"42"},{"size":11236,"mtime":1697321678845,"results":"64","hashOfConfig":"42"},{"size":546,"mtime":1695788406887,"results":"65","hashOfConfig":"42"},{"size":9220,"mtime":1697322287941,"results":"66","hashOfConfig":"42"},{"size":10028,"mtime":1697321565898,"results":"67","hashOfConfig":"42"},{"size":4926,"mtime":1695788406887,"results":"68","hashOfConfig":"42"},{"size":700,"mtime":1695788406893,"results":"69","hashOfConfig":"42"},{"size":4628,"mtime":1695788406899,"results":"70","hashOfConfig":"42"},{"size":6003,"mtime":1695788406893,"results":"71","hashOfConfig":"42"},{"size":29855,"mtime":1695788406895,"results":"72","hashOfConfig":"42"},{"size":5283,"mtime":1695788406896,"results":"73","hashOfConfig":"42"},{"size":6659,"mtime":1695788406895,"results":"74","hashOfConfig":"42"},{"size":7627,"mtime":1695788406893,"results":"75","hashOfConfig":"42"},{"size":6722,"mtime":1695788406895,"results":"76","hashOfConfig":"42"},{"size":7601,"mtime":1695788406889,"results":"77","hashOfConfig":"42"},{"size":13609,"mtime":1695788406890,"results":"78","hashOfConfig":"42"},{"size":5475,"mtime":1695788406889,"results":"79","hashOfConfig":"42"},{"size":4631,"mtime":1695788406891,"results":"80","hashOfConfig":"42"},{"size":561,"mtime":1695788406894,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f80fmx",{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\index.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\App.js",["223","224"],[],"import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport HomePage from './pages/HomePage';\r\nimport SigninPage from \"./pages/SigninPage\";\r\nimport ForgotPasswordPage from './pages/ForgotPasswordPage';\r\nimport PageNotFound from './pages/PageNotFound';\r\nimport DashBoardPage from './pages/DashBoardPage';\r\nimport ProjectPage from 'pages/ProjectPage';\r\nimport jwt_decode from 'jwt-decode';\r\nimport CoursesPage from 'pages/CoursesPage';\r\nimport CoursePage from 'pages/CoursePage';\r\nimport Test from 'pages/Test';\r\nimport PreferenceForm from 'components/forms/PreferenceForm';\r\n\r\nfunction App() {\r\n\r\n  const isAdmin = (nextState, replace) => {\r\n    try {\r\n      const token = document.cookie.split('; ').find(row => row.startsWith('token=')).split('=')[1];\r\n      const decodedToken = jwt_decode(token);\r\n      const role = decodedToken.role;\r\n      if (role !== \"ADMIN\") {\r\n        replace({\r\n          pathname: '/dashboard',\r\n          state: { nextPathname: nextState.location.pathname },\r\n        });\r\n      } \r\n    } catch (err) {\r\n      replace({\r\n        pathname: '/signin',\r\n        state: { nextPathname: nextState.location.pathname },\r\n      });\r\n    } \r\n  }\r\n\r\n  const isLoggedIn = (nextState, replace) => {\r\n    try {\r\n      const token = document.cookie.split('; ').find(row => row.startsWith('token=')).split('=')[1];\r\n      const decodedToken = jwt_decode(token);\r\n      const role = decodedToken.role;\r\n    } catch (err) {\r\n      replace({\r\n        pathname: '/signin',\r\n        state: { nextPathname: nextState.location.pathname },\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"/signin\" element={<SigninPage />} />\r\n        <Route path=\"/forgot-password\" element={<ForgotPasswordPage />} />\r\n        <Route path=\"/project\" element={<ProjectPage />} onEnter={isAdmin} />\r\n        <Route path=\"/dashboard\" element={<DashBoardPage />} onEnter={isLoggedIn} />\r\n        <Route path=\"/courses\" element={<CoursesPage />} onEnter={isLoggedIn} />\r\n        <Route path=\"/courses/:name\" element={<CoursePage />}  onEnter={isLoggedIn} />\r\n        <Route path=\"/test\" element={<Test />} />\r\n        <Route path='*' element={<PageNotFound />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\HomePage.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\PageNotFound.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\SigninPage.js",["225"],[],"import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport \"../styles/SigninPage.css\";\r\nimport camsBlue from '../assets/camsBlue.png';\r\n\r\nexport default function SignInPage() {\r\n  const navigate = useNavigate();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n    setErrorMessage(\"\");\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n    setErrorMessage(\"\");\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const response = await fetch('/api/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ email: email, password: password })\r\n    });\r\n\r\n    if (response.ok) {\r\n      navigate('/dashboard', { replace: true });\r\n    } else if (response.status === 400){\r\n      setErrorMessage('Username/ Password missing');\r\n    } else if (response.status === 401) {\r\n        setErrorMessage('Wrong Username/ Password');  \r\n    } else {\r\n        setErrorMessage('Internal server error. Try again');\r\n    }\r\n  };\r\n\r\n  const [passwordFocused, setPasswordFocused] = useState(false);\r\n  const [passwordHasValue, setPasswordHasValue] = useState(false);\r\n\r\n  const [isFocused, setIsFocused] = useState(false);\r\n  const [hasValue, setHasValue] = useState(false);\r\n\r\n  const handleFocus = () => {\r\n      setIsFocused(true);\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n      setIsFocused(false);\r\n      setHasValue(e.target.value !== '');\r\n  };\r\n\r\n  const handleBack = (event) => {\r\n    event.preventDefault();\r\n    navigate(\"/\", {replace: true});\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <div className='sign-in-page'> \r\n              <div className='formSignIn-container'>\r\n\r\n                  <div className='forSignIn-Top'>  \r\n\r\n                                          {/* logo goes here */}\r\n                                          <div className='formSignIn-logo'>\r\n                                              <div class=\"formLogin-camsBlue\"> <img src={camsBlue} alt=\"CAMS Logo\" />  </div>\r\n                                          </div>\r\n\r\n                                          {/* Help icon goes here */}\r\n                                          <div className='formSignIn-help'>\r\n                                              <div className='formLogin-question'> \r\n                                                  <svg className='qSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"27\" height=\"27\" viewBox=\"0 0 29 29\">\r\n                                                      <path id=\"ic_help_outline_24px\" d=\"M15.05,25.2h2.9V22.3h-2.9ZM16.5,2A14.5,14.5,0,1,0,31,16.5,14.505,14.505,0,0,0,16.5,2Zm0,26.1A11.6,11.6,0,1,1,28.1,16.5,11.615,11.615,0,0,1,16.5,28.1Zm0-20.3a5.8,5.8,0,0,0-5.8,5.8h2.9a2.9,2.9,0,1,1,5.8,0c0,2.9-4.35,2.538-4.35,7.25h2.9c0-3.263,4.35-3.625,4.35-7.25A5.8,5.8,0,0,0,16.5,7.8Z\" transform=\"translate(-2 -2)\" fill=\"#fff\"/>\r\n                                                  </svg>\r\n                                              </div>\r\n                                          </div>\r\n\r\n                  </div>\r\n\r\n                  <div className='formSignIn'> \r\n                                <span class='formSignIn-01'>Sign in</span>\r\n                                <span   class='formSignIn-02'>to your account</span>\r\n                  </div>\r\n                    \r\n            <form  className='formSignIn-form' onSubmit={handleSubmit}>\r\n\r\n\r\n                    <div className='formSignIn-inputfields'>\r\n\r\n                              <div className='formSignIn-email' >\r\n                                <label htmlFor=\"email\"  className={`label ${isFocused || hasValue ? 'focused' : ''}`}>Email</label>\r\n                                <input\r\n                                  type=\"email\"\r\n                                  id=\"email\"\r\n                                  value={email}\r\n                                  onChange={handleEmailChange}\r\n                                  className={`input ${isFocused || hasValue ? 'focused' : ''}`}\r\n                                  onFocus={handleFocus}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </div>\r\n\r\n                              <div className='formSignIn-password'>\r\n                                <input\r\n                                  type=\"password\"\r\n                                  id=\"password\"\r\n                                  className=\"pwd-input\"\r\n                                  value={password}\r\n                                  onChange={handlePasswordChange}\r\n                                  onFocus={() => setPasswordFocused(true)}\r\n                                                      onBlur={(e) => {\r\n                                                          setPasswordFocused(false);\r\n                                                          setPasswordHasValue(e.target.value !== '');\r\n                                                      }}\r\n\r\n                                />\r\n                                <label htmlFor=\"password\" className={`pwd-label ${passwordFocused  || passwordHasValue ? 'focused' : ''}`}>Password</label>\r\n                              </div>\r\n\r\n                    </div>  \r\n\r\n          \r\n\r\n                    <a className=\"forgot-password\" href=\"/forgot-password\">\r\n                      Forgot Password?\r\n                    </a>\r\n\r\n\r\n                    <div id=\"error\" style={{ color: \"red\" }}>\r\n                      {errorMessage}\r\n                    </div>\r\n\r\n                    <div className='form-buttons'>\r\n                      <button className='LoginForm-continue' type=\"submit\">Continue</button>\r\n                      <button className='LoginFrom-homepage' onClick={handleBack}>Back to Home Page</button>\r\n                    </div>\r\n\r\n            </form>\r\n\r\n          </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\ForgotPasswordPage.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\DashBoardPage.js",["226"],[],"import React from 'react';\r\nimport jwt_decode from 'jwt-decode';\r\nimport ClientDashBoard from 'components/Dashboard/ClientDashboard';\r\nimport AdminDashboard from 'components/Dashboard/AdminDashboard';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function DashBoardPage() {\r\n  const navigate = useNavigate();\r\n  const token = document.cookie.split('; ').find(row => row.startsWith('token=')).split('=')[1];\r\n  const decodedToken = jwt_decode(token);\r\n  const role = decodedToken.role;\r\n\r\n  React.useEffect(()=>{\r\n    if (!role) {\r\n      navigate(\"/signin\", {replace: true});\r\n    }\r\n\r\n    if (role === \"STUDENT\") {\r\n      navigate(\"/courses\", {replace: true});\r\n    }\r\n  },[]);\r\n\r\n  return (\r\n    <div>\r\n      {role === \"ADMIN\" && <AdminDashboard />}\r\n      {role === \"CLIENT\" && <ClientDashBoard /> }\r\n    </div>\r\n  );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\Test.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\CoursesPage.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\CoursePage.js",["227"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Navbar from \"components/Header/navbar\";\r\nimport Footer from \"components/Footer/footer\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport CoursesAssignment from \"../components/courses/CoursesAssignment\";\r\nimport CoursesProject from \"../components/courses/CoursesProjects\";\r\nimport CoursesStudents from \"../components/courses/CoursesStudents\";\r\nimport Cookies from \"js-cookie\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport \"../styles/index.css\";\r\nimport StudentCoursePage from \"./StudentCoursePage\";\r\n\r\nexport default function CoursePage() {\r\n  const { name } = useParams();\r\n  const [component, setComponent] = useState(1);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [course, setCourse] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  function checkSignedIn() {\r\n    try {\r\n      const token = Cookies.get(\"token\");\r\n      const payload = jwtDecode(token);\r\n      const role = payload.role;\r\n      if (role === \"CLIENT\") {\r\n        navigate(\"/signin\", { replace: true });\r\n      } else {\r\n        return role;\r\n      }\r\n    } catch (error) {\r\n      navigate(\"/signin\", { replace: true });\r\n    }\r\n  }\r\n\r\n  const role = checkSignedIn();\r\n\r\n  useEffect(() => {\r\n    checkSignedIn();\r\n\r\n    async function fetchCourse() {\r\n      try {\r\n        const response = await axios.get(`/api/courses/${name}`);\r\n        if (response.status === 200) {\r\n          setCourse(response.data);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        navigate(\"/signin\", { replace: true });\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchCourse();\r\n  }, [name, role]);\r\n\r\n  function renderComponent(course) {\r\n    switch (component) {\r\n      case 1:\r\n        return <CoursesStudents course={course} />;\r\n      case 2:\r\n        return <CoursesProject course={course} />;\r\n      case 3:\r\n        return <CoursesAssignment course={course} />;\r\n      default:\r\n        return <CoursesStudents course={course} />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Navbar />\r\n      <div className=\"main-content\">\r\n        {isLoading ? (\r\n          <div>Loading...</div>\r\n        ) : (\r\n          <>\r\n            {role === \"ADMIN\" && (\r\n              <div className=\"coursepage-component\">\r\n\r\n                  <div className=\"coursepage-sub-navbar\">\r\n\r\n                        <div className=\"sub-nav-right\"> \r\n                              <div className=\"sub-nav-title\">{ name }</div>\r\n                        </div>\r\n\r\n                        <div className=\"sub-nav-left\"> \r\n                              <div className=\"set-students\" onClick={() => setComponent(1)}>Student Management</div>\r\n                              <div className=\"set-projects\" onClick={() => setComponent(2)}>Project Management</div>\r\n                              <div className=\"assign-projects\" onClick={() => setComponent(3)}>Project Allocation</div>\r\n                        </div>\r\n                                            \r\n                  </div>\r\n\r\n                  {renderComponent(course)}\r\n              </div>\r\n            )}\r\n            {role === \"STUDENT\" && <StudentCoursePage  data={course} />}\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className=\"bottom\">\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\ProjectPage.js",["228"],[],"import React from \"react\";\r\nimport ActiveProjects from \"../components/project/ActiveProjects\";\r\nimport PendingProjects from \"../components/project/PendingProjects\";\r\nimport PublishProjects from \"../components/project/PublishProjects\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Navbar from \"components/Header/navbar\";\r\nimport Footer from \"components/Footer/footer\";\r\nimport \"../styles/index.css\";\r\n\r\nexport default function ProjectPage() {\r\n  const token = document.cookie\r\n    .split(\"; \")\r\n    .find((row) => row.startsWith(\"token=\"))\r\n    .split(\"=\")[1];\r\n  const decodedToken = jwt_decode(token);\r\n  const role = decodedToken.role;\r\n  const navigate = useNavigate();\r\n\r\n  const [tab, setTab] = React.useState(1);\r\n\r\n  function renderTab() {\r\n    switch (tab) {\r\n      case 1:\r\n        return <ActiveProjects />;\r\n      case 2:\r\n        return <PendingProjects />;\r\n      case 3:\r\n        return <PublishProjects />;\r\n      default:\r\n        return <ActiveProjects />;\r\n    }\r\n  }\r\n\r\n  const isAdmin = () => {\r\n    if (role !== \"ADMIN\") {\r\n      navigate(\"/signin\", { replace: true });\r\n    }\r\n  };\r\n\r\n  React.useEffect(()=>{\r\n    isAdmin();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Navbar />\r\n      <div className=\"main-content\">\r\n        \r\n          <div className=\"project-sub-navbar\">\r\n\r\n                          <div className=\"project-sub-nav-right\"> \r\n                                <div className=\"project-sub-nav-title\">Project Administration</div>\r\n                          </div>\r\n\r\n                          <div className=\"project-sub-nav-left\"> \r\n                                <div className=\"active-projects\" onClick={() => setTab(1)}>Active Projects</div>\r\n                                <div className=\"pending-projects\"  onClick={() => setTab(2)}>Pending Projects</div>\r\n                                <div className=\"client-admin\"  onClick={() => setTab(3)}>Client Management</div>\r\n                          </div>\r\n\r\n      </div>\r\n\r\n        <div>{renderTab()}</div>\r\n      </div>\r\n      <div className=\"bottom\">\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\PreferenceForm.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\StudentCoursePage.js",["229"],[],"import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport ProjectPreview from \"components/project/ProjectPreview\";\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  Paper,\r\n  Toolbar,\r\n  Typography,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\nimport SearchOutlinedIcon from \"@mui/icons-material/SearchOutlined\";\r\nimport Box from \"@mui/material/Box\";\r\nimport InputBase from \"@mui/material/InputBase\";\r\nimport PreferenceForm from \"components/forms/PreferenceForm\";\r\n\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n  position: \"relative\",\r\n  border: \"1.5px solid #9F9F9F\",\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  \"&:hover\": {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  width: \"100%\",\r\n  marginRight: \"1rem\",\r\n  marginLeft: 0,\r\n  boxShadow: \"none\",\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    width: \"40ch\",\r\n    marginLeft: theme.spacing(1),\r\n    \"&:focus\": {\r\n      width: \"30ch\", // Increase the focused width here\r\n    },\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: \"100%\",\r\n  position: \"absolute\",\r\n  pointerEvents: \"none\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  boxShadow: \"none\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: \"inherit\",\r\n  \"& .MuiInputBase-input\": {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    boxShadow: \"none\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"40ch\",\r\n      \"&:focus\": {\r\n        width: \"20ch\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledPaper = styled(Paper)(({ theme }) => ({\r\n  marginLeft: theme.spacing(7),\r\n  background: \"whitesmoke\",\r\n  borderRadius: \"10px\",\r\n  marginRight: theme.spacing(7),\r\n  marginTop: theme.spacing(7),\r\n  marginBottom: theme.spacing(7),\r\n}));\r\n\r\nconst HeaderTableCell = styled(TableCell)(({ theme }) => ({\r\n  backgroundColor: \"#0097EB\",\r\n  fontSize: \"16px\",\r\n  fontFamily: \"Poppins\",\r\n  color: theme.palette.common.white,\r\n  whiteSpace: \"normal\",\r\n  overflow: \"hidden\",\r\n  textOverflow: \"ellipsis\",\r\n}));\r\n\r\nconst HoverTableRow = styled(TableRow)(({ theme }) => ({\r\n  \"&:hover\": {\r\n    backgroundColor: alpha(theme.palette.primary.main, 0.1),\r\n    cursor: \"pointer\",\r\n  },\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  fontSize: \"14.5px\",\r\n  fontFamily: \"Poppins\",\r\n  whiteSpace: \"normal\",\r\n  overflow: \"hidden\",\r\n  textOverflow: \"ellipsis\",\r\n  maxWidth: \"1px\",\r\n}));\r\n\r\n\r\nfunction StudentCoursesPage({ data }) {\r\n  const [projects, setProjects] = useState([]);\r\n  const [filteredProjects, setFilteredProjects] = useState([]);\r\n  const [preview, setPreview] = useState(false);\r\n\r\n  const [selected, setSelected] = React.useState(\"\");\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchName, setSearchName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setProjects(data.projects);\r\n    setFilteredProjects(data.projects);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (searchName) {\r\n      const filtered = projects.filter((client) =>\r\n        client.name.toLowerCase().includes(searchName.toLowerCase())\r\n      );\r\n      setFilteredProjects(filtered);\r\n    } else {\r\n      setFilteredProjects(projects);\r\n    }\r\n  }, [projects, searchName]);\r\n\r\n  const handleClick = (id) => {\r\n    setPreview(true);\r\n    setSelected(id);\r\n  };\r\n\r\n  useEffect(()=>{\r\n    async function info(){\r\n    try {\r\n      const response = await axios.get(`/api/courses/teamates/${data.name}`)\r\n      console.log(response.data);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  info();\r\n\r\n  }, [data])\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSearchNameChange = (event) => {\r\n    setSearchName(event.target.value);\r\n    if (searchName) {\r\n      const filtered = projects.filter((client) =>\r\n        client.name.toLowerCase().includes(searchName.toLowerCase())\r\n      );\r\n      setFilteredProjects(filtered);\r\n    } else {\r\n      setFilteredProjects(projects);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setPreview(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n\r\n      {preview && (\r\n        <ProjectPreview projectId={selected} handleClose={handleClose} />\r\n      )}\r\n      {/* table goes here */}\r\n      <StyledPaper>\r\n        <Toolbar sx={{ height: \"100px\" }}>\r\n          <Typography\r\n            variant=\"h5\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{\r\n              flexGrow: 1,\r\n              display: { xs: \"none\", sm: \"block\" },\r\n              color: \"#0097EB\",\r\n              fontFamily: \"Poppins\",\r\n            }}\r\n          >\r\n            Projects in this Course\r\n          </Typography>\r\n\r\n          <Search>\r\n            <SearchIconWrapper>\r\n              <SearchOutlinedIcon sx={{ color: \"#9F9F9F\" }} />\r\n            </SearchIconWrapper>\r\n            <StyledInputBase\r\n              placeholder=\"Search by Project Name\"\r\n              inputProps={{ Poppins: \"search\" }}\r\n              value={searchName}\r\n              onChange={handleSearchNameChange}\r\n            />\r\n          </Search>\r\n\r\n          {/* need to add preferences button */}\r\n          <PreferenceForm course={data} />\r\n          <Box sx={{ ml: 1.5 }}></Box>\r\n        </Toolbar>\r\n        <TableContainer>\r\n          <Table sx={{ width: \"100%\" }}>\r\n            <TableHead>\r\n              <TableRow sx={{ height: \"30px\" }}>\r\n                <HeaderTableCell sx={{ width: \"5%\", paddingLeft: \"25px\" }}>\r\n                  S.No\r\n                </HeaderTableCell>\r\n                <HeaderTableCell sx={{ width: \"30%\" }}>\r\n                  Project Name\r\n                </HeaderTableCell>\r\n                <HeaderTableCell sx={{ width: \"30%\" }}>Skills</HeaderTableCell>\r\n                <HeaderTableCell sx={{ width: \"15%\" }}>\r\n                  Administrators\r\n                </HeaderTableCell>\r\n                <HeaderTableCell sx={{ width: \"10%\", paddingRight: \"42px\" }}>\r\n                  Created By\r\n                </HeaderTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredProjects\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <HoverTableRow\r\n                      key={row._id}\r\n                      onClick={() => handleClick(row._id)}\r\n                    >\r\n                      <StyledTableCell\r\n                        sx={{ width: \"5%\", paddingLeft: \"25px\" }}\r\n                      >\r\n                        {index + 1 + page * rowsPerPage}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell sx={{ width: \"30%\" }}>\r\n                        {row.name}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell sx={{ width: \"25%\" }}>\r\n                        {row.skills}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell sx={{ width: \"15%\" }}>\r\n                        {row.administrators}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell sx={{ width: \"15%\" }}>\r\n                        {row.createdBy}\r\n                      </StyledTableCell>\r\n                    </HoverTableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          sx={{ marginRight: \"1.5rem\" }}\r\n          component=\"div\"\r\n          count={projects.length}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          rowsPerPage={rowsPerPage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </StyledPaper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StudentCoursesPage;\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\Footer\\footer.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\AdminCousesPage.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\Dashboard\\AdminDashboard.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forgot-my-password\\noteCheckYourEmail.js",["230"],[],"import React from 'react';\r\nimport camsBlue from '../../assets/camsBlue.png';\r\nimport '../../styles/noteCheckStyles.css'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst NoteCheckYourEmail = ({changeContent}) => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleBackToSignin = (event) => {\r\n    navigate(\"/signin\", {replace:true});\r\n    changeContent(1);\r\n  }\r\n\r\n  const tryAnotherEmail = (event) => {\r\n    changeContent(1);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='noteCheckYourEmail'>\r\n        <div className='noteCheckYourEmail-container'>\r\n            <form className='noteCheckYourEmail-actualForm'>\r\n                        <div className='noteCheckYourEmail-Logo-Help'>\r\n                            \r\n                                {/* logo goes here */}\r\n                                <div className='noteCheckYourEmail-logo'>\r\n                                    <div class=\"noteCheckYourEmail-camsBlue\"> <img src={camsBlue} alt=\"CAMS Logo\" />  </div>\r\n                                </div>\r\n\r\n                                {/* Help icon goes here */}\r\n                                <div className='noteCheckYourEmail-help'>\r\n                                    <div className='noteCheckYourEmail-question'> \r\n                                        <svg className='qSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"27\" height=\"27\" viewBox=\"0 0 29 29\">\r\n                                            <path id=\"ic_help_outline_24px\" d=\"M15.05,25.2h2.9V22.3h-2.9ZM16.5,2A14.5,14.5,0,1,0,31,16.5,14.505,14.505,0,0,0,16.5,2Zm0,26.1A11.6,11.6,0,1,1,28.1,16.5,11.615,11.615,0,0,1,16.5,28.1Zm0-20.3a5.8,5.8,0,0,0-5.8,5.8h2.9a2.9,2.9,0,1,1,5.8,0c0,2.9-4.35,2.538-4.35,7.25h2.9c0-3.263,4.35-3.625,4.35-7.25A5.8,5.8,0,0,0,16.5,7.8Z\" transform=\"translate(-2 -2)\" fill=\"#fff\"/>\r\n                                        </svg>\r\n                                    </div>\r\n                                </div>\r\n\r\n                        </div>\r\n\r\n                        <div className='check-your-email'> \r\n\r\n                                <span class='check-your-email-text-01'>Check Your Email</span>\r\n\r\n                                <p1   class='check-your-email-text-02'>\r\n                                    We have sent a password recover\r\n                                    Instructions to your email.\r\n                                </p1>\r\n\r\n                                <p1   class='check-your-email-text-03'>\r\n                                    Did not receive email? Check your spam filter,\r\n                                </p1>\r\n\r\n                                <p1   class='check-your-email-text-04' onClick={tryAnotherEmail}>\r\n                                    or<a className='try-another'> try another email address</a>\r\n                                </p1>\r\n                        </div>\r\n\r\n    \r\n\r\n                <div className='noteCheckYourEmail-form-buttons'>\r\n                        <button className='noteCheckYourEmail-button-02' onClick={handleBackToSignin}>Back to Sign in</button>  \r\n                </div>                        \r\n                \r\n            </form>\r\n        </div>\r\n\r\n        <div className='plain-footer'>\r\n\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoteCheckYourEmail","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forgot-my-password\\formResetPassword.js",["231"],[],"import React, { useState } from 'react';\r\nimport camsBlue from '../../assets/camsBlue.png';\r\nimport '../../styles/formResetPasswordStyles.css';\r\nimport axios from \"axios\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst FormResetPassword = ({changeContent}) => {\r\n\r\n    const navigate = useNavigate();\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [hasValue, setHasValue] = useState(false);\r\n    const [email, setEmail] = useState(\"\");\r\n\r\n    const handleFocus = () => {\r\n        setIsFocused(true);\r\n    };\r\n\r\n    const handleBlur = (e) => {\r\n        setIsFocused(false);\r\n        setHasValue(e.target.value !== '');\r\n    };\r\n\r\n    const handleBack = (event) => {\r\n        event.preventDefault();\r\n        navigate(\"/signin\", {replace: true});\r\n    }\r\n\r\n    const handleContinue = async(event) => {\r\n        event.preventDefault();\r\n        if (email) {\r\n            try {\r\n                const response = await axios.post('/api/forgot-password', \r\n            {email:email}, {headers:{'Content-Type': 'application/json'}});\r\n            switch (response.status) {\r\n                case 200:\r\n                    console.log(\"succesful\");\r\n                    changeContent(2);\r\n                    break;\r\n                case 404:\r\n                    console.log(\"Your email is not signed up\");\r\n                    break;\r\n                case 400:\r\n                    console.log(\"Email is missing\");\r\n                    break;\r\n                case 500:\r\n                    console.log(\"Email address doesnt exist\");\r\n                    break;\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n            }  \r\n        } else {\r\n            console.log(\"Email cannot be empty\");\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className='reset-pwd'>\r\n        <div className='reset-pwd-container'>\r\n            <form className='reset-pwd-actualForm'>\r\n                        <div className='reset-pwd-Logo-Help'>\r\n                            \r\n                                {/* logo goes here */}\r\n                                <div className='reset-pwd-logo'>\r\n                                    <div class=\"reset-pwd-camsBlue\"> <img src={camsBlue} alt=\"CAMS Logo\" />  </div>\r\n                                </div>\r\n\r\n                                {/* Help icon goes here */}\r\n                                <div className='reset-pwd-help'>\r\n                                    <div className='reset-pwd-question'> \r\n                                        <svg className='qSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"27\" height=\"27\" viewBox=\"0 0 29 29\">\r\n                                            <path id=\"ic_help_outline_24px\" d=\"M15.05,25.2h2.9V22.3h-2.9ZM16.5,2A14.5,14.5,0,1,0,31,16.5,14.505,14.505,0,0,0,16.5,2Zm0,26.1A11.6,11.6,0,1,1,28.1,16.5,11.615,11.615,0,0,1,16.5,28.1Zm0-20.3a5.8,5.8,0,0,0-5.8,5.8h2.9a2.9,2.9,0,1,1,5.8,0c0,2.9-4.35,2.538-4.35,7.25h2.9c0-3.263,4.35-3.625,4.35-7.25A5.8,5.8,0,0,0,16.5,7.8Z\" transform=\"translate(-2 -2)\" fill=\"#fff\"/>\r\n                                        </svg>\r\n                                    </div>\r\n                                </div>\r\n\r\n                        </div>\r\n\r\n                        <div className='reset-password'> \r\n                                <span class='reset-password-text-01'>Reset Password</span>\r\n                                <p1   class='reset-password-text-02'>\r\n                                    Enter the email associated with your account and\r\n                                    we’ll send an email with instructions to reset your password.\r\n                                </p1>\r\n                        </div>\r\n\r\n      \r\n                <div className='reset-pwd-input-fields'>\r\n                        <div className='reset-pwd-email'>\r\n\r\n                                <label htmlFor=\"email\" className={`reset-pwd-label ${isFocused || hasValue ? 'focused' : ''}`}>\r\n                                    Email Address\r\n                                </label>\r\n\r\n                                <input\r\n                                    type=\"email\"\r\n                                    id=\"email\"\r\n                                    className={`reset-pwd-input ${isFocused || hasValue ? 'focused' : ''}`}\r\n                                    onFocus={handleFocus}\r\n                                    onBlur={handleBlur}\r\n                                    value={email}\r\n                                    onChange={(event)=>{setEmail(event.target.value)}}\r\n                                />\r\n                        </div>\r\n\r\n                </div>\r\n\r\n                <div className='reset-pwd-form-buttons'>\r\n                        <button className='reset-pwd-button-01' onClick={handleContinue}>Send Instructions</button>\r\n                        <button className='reset-pwd-button-02' onClick={handleBack}>Back to Sign in</button>  \r\n                </div>                        \r\n                \r\n            </form>\r\n        </div>\r\n\r\n        <div className='plain-footer'>\r\n\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormResetPassword","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\Dashboard\\ClientDashboard.js",["232","233","234"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport PublishProjectForm from \"components/forms/PublishProjectForm\";\r\nimport ProjectPreview from \"../project/ProjectPreview\";\r\nimport Navbar from \"components/Header/navbar\";\r\n\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCell, \r\n  TableContainer, \r\n  TableHead, \r\n  TableRow, \r\n  TablePagination, \r\n  Paper, \r\n  Toolbar, \r\n  Typography, \r\n} from '@mui/material';\r\nimport { styled, alpha } from '@mui/material/styles';\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport Box from '@mui/material/Box';\r\nimport InputBase from '@mui/material/InputBase';\r\n\r\n// take these for search button\r\nconst Search = styled('div')(({ theme }) => ({\r\n  position: 'relative',\r\n  border: \"1.5px solid #9F9F9F\",\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  width: \"100%\",\r\n  marginRight:\"3rem\",\r\n  marginLeft: 0,\r\n  boxShadow: 'none',\r\n  [theme.breakpoints.up('sm')]: {\r\n    width: '40ch',\r\n    marginLeft: theme.spacing(1),\r\n    '&:focus': {\r\n      width: '30ch', // Increase the focused width here\r\n    },\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: '100%',\r\n  position: 'absolute',\r\n  pointerEvents: 'none',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  boxShadow: \"none\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: 'inherit',\r\n  '& .MuiInputBase-input': {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create('width'),\r\n    width: \"100%\",\r\n    height: '100%',\r\n    boxShadow: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '40ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n/// till here\r\n\r\n\r\n\r\nconst StyledPaper = styled(Paper)(({ theme }) => ({\r\n  marginLeft: theme.spacing(7),\r\n  background: \"whitesmoke\" ,\r\n  borderRadius: \"10px\",\r\n  marginRight : theme.spacing(7),\r\n  marginTop: theme.spacing(7),\r\n  marginBottom: theme.spacing(7),\r\n}));\r\n\r\nconst HeaderTableCell = styled(TableCell)(({ theme }) => ({\r\n  backgroundColor: \"#0097EB\" ,\r\n  fontSize: \"16px\",\r\n  fontFamily : \"Poppins\",\r\n  color: theme.palette.common.white,\r\n  whiteSpace: \"normal\",\r\n  overflow: \"hidden\",\r\n  textOverflow: \"ellipsis\"\r\n}));\r\n\r\nconst HoverTableRow = styled(TableRow)(({ theme }) => ({\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.primary.main, 0.1),\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  fontSize: \"14.5px\",\r\n  fontFamily: \"Poppins\",\r\n  whiteSpace: \"normal\",\r\n  overflow: \"hidden\",\r\n  textOverflow: \"ellipsis\",\r\n  maxWidth: \"1px\"\r\n}));\r\n\r\nconst getDate = (dateString) => {\r\n  const date = new Date(dateString);\r\n  const day = date.getDate();\r\n  const month = date.getMonth() + 1; // Months are zero-based, so we need to add 1\r\n  const year = date.getFullYear();\r\n\r\n  return `${day}-${month}-${year}`;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function ClientDashBoard() {\r\n\r\n  const navigate = useNavigate();\r\n  const [projects, setProjects] = useState([]);\r\n  const [popup, setPopup] = useState(false);\r\n  const [selectedProject, setSelectedProject] = useState(\"\");\r\n  const [preview ,setPreview] = useState(false);\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchName, setSearchName] = useState(\"\");\r\n  const [filteredProjects, setFilteredProjects] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    async function fetchTableData() {\r\n      try {\r\n        const response = await axios.get('/api/projects');\r\n        setProjects(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchTableData();\r\n    }, []);\r\n\r\n  useEffect(() => {\r\n      if (searchName) {\r\n        const filtered = projects.filter((project) => project.name.toLowerCase().includes(searchName.toLowerCase()));\r\n        setFilteredProjects(filtered);\r\n      } else {\r\n        setFilteredProjects(projects);\r\n      }\r\n  }, [projects, searchName]);\r\n\r\n\r\n  const handleClose = () => {\r\n    setPreview(false);\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSearchNameChange = (event) => {\r\n    setSearchName(event.target.value);\r\n    if (searchName) {\r\n      const filtered = projects.filter((project) => project.name.toLowerCase().includes(searchName.toLowerCase()));\r\n      setFilteredProjects(filtered);\r\n    } else {\r\n      setFilteredProjects(projects);\r\n    }\r\n  }  \r\n\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      {preview && <ProjectPreview projectId={selectedProject}  handleClose={handleClose} />}\r\n      \r\n      <StyledPaper>\r\n        <Toolbar sx={{height:\"100px\"}}>\r\n         \r\n         <Typography\r\n           variant=\"h5\"\r\n           noWrap\r\n           component=\"div\"\r\n           sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } , color: \"#0097EB\", fontFamily:\"Poppins\" }}\r\n         >\r\n           Your Projects\r\n         </Typography>\r\n\r\n\r\n          {/*take this */}\r\n         <Search >\r\n           <SearchIconWrapper>\r\n             <SearchOutlinedIcon sx={{color: \"#9F9F9F\"}} />\r\n           </SearchIconWrapper>\r\n           <StyledInputBase\r\n             placeholder=\"Search by Project Name\"\r\n             inputProps={{ 'Poppins': 'search' }}\r\n             value={searchName}\r\n             onChange={handleSearchNameChange}\r\n           />\r\n         </Search>\r\n\r\n         {/*till here */}\r\n         \r\n         <PublishProjectForm data={projects} setData={setProjects} />\r\n         <Box sx={{ml:1.5}} ></Box>\r\n        </Toolbar>\r\n        <TableContainer >\r\n          <Table sx={{ width: '100%' }}>\r\n            <TableHead>\r\n              <TableRow sx={{height:\"30px\" }}>\r\n                <HeaderTableCell sx={{width:\"5%\", paddingLeft:\"25px\"}} >S.No</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"35%\"}} >Project Name</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"40%\"}} >Skills</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"20%\"}} >Created On</HeaderTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredProjects\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <HoverTableRow key={row._id}>\r\n                      <StyledTableCell sx={{ width:\"5%\", paddingLeft:\"25px\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{index + 1 + page * rowsPerPage}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"30%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{row.name}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"30%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{row.skills}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"10%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{getDate(row.createdAt)}</StyledTableCell>\r\n                    </HoverTableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          sx = {{marginRight:\"1.5rem\"}}\r\n          component=\"div\"\r\n          count={projects.length}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          rowsPerPage={rowsPerPage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </StyledPaper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\CoursesProjects.js",["235"],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\pages\\StudentCoursesPage.js",["236","237","238"],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\project\\PublishProjects.js",["239"],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\project\\PendingProjects.js",["240","241"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { styled, alpha } from '@mui/material/styles';\r\nimport axios from 'axios';\r\nimport InputBase from '@mui/material/InputBase';\r\nimport ConfirmationPopup from 'components/forms/ConfimationPopup';\r\nimport CheckCircleSharpIcon from '@mui/icons-material/CheckCircleSharp';\r\n\r\nimport ProjectPreview from './ProjectPreview';\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\n\r\n\r\n// Import Material-UI components\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCell, \r\n  TableContainer, \r\n  TableHead, \r\n  TableRow, \r\n  TablePagination, \r\n  Paper, \r\n  Toolbar, \r\n  Typography, \r\n  IconButton, \r\n} from '@mui/material';\r\nimport { Delete } from '@mui/icons-material';\r\n\r\n\r\nconst Search = styled('div')(({ theme }) => ({\r\n  position: 'relative',\r\n  border: \"1.5px solid #9F9F9F\",\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  width: \"100%\",\r\n  marginRight:\"1rem\",\r\n  marginLeft: 0,\r\n  boxShadow: 'none',\r\n  [theme.breakpoints.up('sm')]: {\r\n    width: '40ch',\r\n    marginLeft: theme.spacing(1),\r\n    '&:focus': {\r\n      width: '30ch', // Increase the focused width here\r\n    },\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: '100%',\r\n  position: 'absolute',\r\n  pointerEvents: 'none',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  boxShadow: \"none\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: 'inherit',\r\n  '& .MuiInputBase-input': {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create('width'),\r\n    width: \"100%\",\r\n    height: '100%',\r\n    boxShadow: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '40ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledPaper = styled(Paper)(({ theme }) => ({\r\n  marginLeft: theme.spacing(7),\r\n  background: \"whitesmoke\" ,\r\n  borderRadius: \"10px\",\r\n  marginRight : theme.spacing(7),\r\n  marginTop: theme.spacing(7),\r\n  marginBottom: theme.spacing(7),\r\n}));\r\n\r\nconst HeaderTableCell = styled(TableCell)(({ theme }) => ({\r\n  backgroundColor: \"#0097EB\" ,\r\n  fontSize: \"16px\",\r\n  fontFamily : \"Poppins\",\r\n  color: theme.palette.common.white,\r\n  whiteSpace: \"normal\",\r\n  overflow: \"hidden\",\r\n  textOverflow: \"ellipsis\"\r\n}));\r\n\r\nconst HoverTableRow = styled(TableRow)(({ theme }) => ({\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.primary.main, 0.1),\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  fontSize: \"14.5px\",\r\n  fontFamily: \"Poppins\",\r\n  whiteSpace: \"normal\",\r\n  overflow: \"hidden\",\r\n  textOverflow: \"ellipsis\",\r\n  maxWidth: \"1px\"\r\n}));\r\n\r\nconst getDate = (dateString) => {\r\n  const date = new Date(dateString);\r\n  const day = date.getDate();\r\n  const month = date.getMonth() + 1; // Months are zero-based, so we need to add 1\r\n  const year = date.getFullYear();\r\n\r\n  return `${day}-${month}-${year}`;\r\n};\r\n\r\nfunction PendingProjects() {\r\n\r\n  const [projects, setProjects] = useState([]);\r\n  const navigate = useNavigate();\r\n  const [deletePopup, setDeletePopup] = useState(false);\r\n  const [approvePopup, setApprovePopup] = useState(false);\r\n  const [selectedProject, setSelectedProject] = useState(\"\");\r\n  const [preview ,setPreview] = useState(false);\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchName, setSearchName] = useState(\"\");\r\n  const [filteredProjects, setFilteredProjects] = useState([]);\r\n\r\n  // api call to get the table\r\n  useEffect(() => {\r\n    async function fetchTableData() {\r\n      try {\r\n        const response = await axios.get('/api/projects', {\r\n          params: {\r\n            pending: true\r\n          }\r\n        });\r\n        setProjects(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n      \r\n    fetchTableData();\r\n    }, []);\r\n  \r\n  useEffect(() => {\r\n      if (searchName) {\r\n        const filtered = projects.filter((project) => project.name.toLowerCase().includes(searchName.toLowerCase()));\r\n        setFilteredProjects(filtered);\r\n      } else {\r\n        setFilteredProjects(projects);\r\n      }\r\n  }, [projects, searchName]);\r\n\r\n\r\n  const handleDelete = (id) => {\r\n      setDeletePopup(true);\r\n      setSelectedProject(id);\r\n  }\r\n\r\n  const handleApprove = (id) => {\r\n    setApprovePopup(true);\r\n    setSelectedProject(id);\r\n}\r\n\r\n  const handleClose = () => {\r\n    setPreview(false);\r\n  }\r\n\r\n  const handleYesForApprove = async() => {\r\n    try {\r\n      console.log(selectedProject)\r\n      const response = await axios.put(`/api/project/${selectedProject}?pending=false` );\r\n      \r\n      switch (response.status) {\r\n        case (200):\r\n          console.log(\"Updated successfully\");\r\n          setApprovePopup(false);\r\n          setProjects(projects.filter(p => p._id !== selectedProject));\r\n          setSelectedProject(\"\");\r\n          break;\r\n        case (401):\r\n          console.log(\"Unauthorized to delete\");\r\n          navigate(\"/signin\" , {replace: true});\r\n          break;\r\n\r\n        case(404):\r\n          console.log(\"Cannot find the project\");\r\n          break;\r\n        \r\n        case(500):\r\n          console.log(\"server error\");\r\n          break;\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const handleYesForDelete = async() => {\r\n    try {\r\n      console.log(selectedProject)\r\n      const response = await axios.delete('/api/project/'+ selectedProject);\r\n      \r\n      switch (response.status) {\r\n        case (200):\r\n          console.log(\"Deleted successfully\");\r\n          setDeletePopup(false);\r\n          setProjects(projects.filter(p => p._id !== selectedProject));\r\n          setSelectedProject(\"\");\r\n          break;\r\n        case (401):\r\n          console.log(\"Unauthorized to delete\");\r\n          navigate(\"/signin\" , {replace: true});\r\n          break;\r\n\r\n        case(404):\r\n          console.log(\"Cannot find the project\");\r\n          break;\r\n        \r\n        case(500):\r\n          console.log(\"server error\");\r\n          break;\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const handleNoDelete = (event) => {\r\n    setDeletePopup(false);\r\n  }\r\n\r\n  const handleNoApprove = (event) => {\r\n    setApprovePopup(false);\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSearchNameChange = (event) => {\r\n    setSearchName(event.target.value);\r\n    if (searchName) {\r\n      const filtered = projects.filter((project) => project.name.toLowerCase().includes(searchName.toLowerCase()));\r\n      setFilteredProjects(filtered);\r\n    } else {\r\n      setFilteredProjects(projects);\r\n    }\r\n  }  \r\n\r\n\r\n  return (\r\n    <>\r\n    {deletePopup && <ConfirmationPopup message=\"Are you sure you want to delete this item ?\"  onNo={handleNoDelete} onYes={handleYesForDelete}/>}\r\n    {approvePopup && <ConfirmationPopup message=\"Are you sure you want to approve this project ?\"  onNo={handleNoApprove} onYes={handleYesForApprove}/>}\r\n    {preview && <ProjectPreview projectId={selectedProject}  handleClose={handleClose} />}\r\n    \r\n    <StyledPaper>\r\n        <Toolbar sx={{height:\"100px\"}}>\r\n         \r\n         <Typography\r\n           variant=\"h5\"\r\n           noWrap\r\n           component=\"div\"\r\n           sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } , color: \"#0097EB\", fontFamily:\"Poppins\" }}\r\n         >\r\n           Pending Projects\r\n         </Typography>\r\n\r\n         <Search >\r\n           <SearchIconWrapper>\r\n             <SearchOutlinedIcon sx={{color: \"#9F9F9F\"}} />\r\n           </SearchIconWrapper>\r\n           <StyledInputBase\r\n             placeholder=\"Search by Project Name\"\r\n             inputProps={{ 'Poppins': 'search' }}\r\n             value={searchName}\r\n             onChange={handleSearchNameChange}\r\n           />\r\n         </Search>\r\n        </Toolbar>\r\n        <TableContainer >\r\n          <Table sx={{ width: '100%' }}>\r\n            <TableHead>\r\n              <TableRow sx={{height:\"30px\" }}>\r\n                <HeaderTableCell sx={{width:\"5%\", paddingLeft:\"25px\"}} >S.No</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"25%\"}} >Project Name</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"30%\"}} >Skills</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"10%\"}} >Created On</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"20%\"}} >Created By</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"10%\", paddingRight:\"42px\" }} >Actions</HeaderTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredProjects\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <HoverTableRow key={row._id}>\r\n                      <StyledTableCell sx={{ width:\"5%\", paddingLeft:\"25px\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{index + 1 + page * rowsPerPage}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"25%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{row.name}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"30%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{row.skills}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"10%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{getDate(row.createdAt)}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"20%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{row.createdBy}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"10%\", paddingRight:\"42px\"}} align=\"left\">\r\n                        <IconButton onClick={() => handleDelete(row._id)} color=\"error\">\r\n                          <Delete />\r\n                        </IconButton>\r\n                        <IconButton onClick={() => handleApprove(row._id)} color=\"green\">\r\n                          <CheckCircleSharpIcon sx={{color: \"#0F9F6F\"}} />\r\n                        </IconButton>\r\n                      </StyledTableCell>\r\n                    </HoverTableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          sx = {{marginRight:\"1.5rem\"}}\r\n          component=\"div\"\r\n          count={projects.length}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          rowsPerPage={rowsPerPage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </StyledPaper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PendingProjects;\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\CoursesAssignment.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\CoursesStudents.js",["242"],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\project\\ActiveProjects.js",["243"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport ConfirmationPopup from 'components/forms/ConfimationPopup';\r\nimport PublishProjectForm from 'components/forms/PublishProjectForm';\r\nimport ProjectPreview from './ProjectPreview';\r\n\r\n\r\n\r\n// Import Material-UI components\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCell, \r\n  TableContainer, \r\n  TableHead, \r\n  TableRow, \r\n  TablePagination, \r\n  Paper, \r\n  Toolbar, \r\n  Typography, \r\n  IconButton, \r\n} from '@mui/material';\r\nimport { styled, alpha } from '@mui/material/styles';\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport Box from '@mui/material/Box';\r\nimport InputBase from '@mui/material/InputBase';\r\nimport { Delete } from '@mui/icons-material';\r\n\r\n// take these for search button\r\nconst Search = styled('div')(({ theme }) => ({\r\n  position: 'relative',\r\n  border: \"1.5px solid #9F9F9F\",\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  width: \"100%\",\r\n  marginRight:\"3rem\",\r\n  marginLeft: 0,\r\n  boxShadow: 'none',\r\n  [theme.breakpoints.up('sm')]: {\r\n    width: '40ch',\r\n    marginLeft: theme.spacing(1),\r\n    '&:focus': {\r\n      width: '30ch', // Increase the focused width here\r\n    },\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: '100%',\r\n  position: 'absolute',\r\n  pointerEvents: 'none',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  boxShadow: \"none\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: 'inherit',\r\n  '& .MuiInputBase-input': {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create('width'),\r\n    width: \"100%\",\r\n    height: '100%',\r\n    boxShadow: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '40ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n/// till here\r\n\r\n\r\n\r\nconst StyledPaper = styled(Paper)(({ theme }) => ({\r\n  marginLeft: theme.spacing(7),\r\n  background: \"whitesmoke\" ,\r\n  borderRadius: \"10px\",\r\n  marginRight : theme.spacing(7),\r\n  marginTop: theme.spacing(7),\r\n  marginBottom: theme.spacing(7),\r\n}));\r\n\r\nconst HeaderTableCell = styled(TableCell)(({ theme }) => ({\r\n  backgroundColor: \"#0097EB\" ,\r\n  fontSize: \"16px\",\r\n  fontFamily : \"Poppins\",\r\n  color: theme.palette.common.white,\r\n  whiteSpace: \"normal\",\r\n  overflow: \"hidden\",\r\n  textOverflow: \"ellipsis\"\r\n}));\r\n\r\nconst HoverTableRow = styled(TableRow)(({ theme }) => ({\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.primary.main, 0.1),\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  fontSize: \"14.5px\",\r\n  fontFamily: \"Poppins\",\r\n  whiteSpace: \"normal\",\r\n  overflow: \"hidden\",\r\n  textOverflow: \"ellipsis\",\r\n  maxWidth: \"1px\"\r\n}));\r\n\r\nconst getDate = (dateString) => {\r\n  const date = new Date(dateString);\r\n  const day = date.getDate();\r\n  const month = date.getMonth() + 1; // Months are zero-based, so we need to add 1\r\n  const year = date.getFullYear();\r\n\r\n  return `${day}-${month}-${year}`;\r\n};\r\n\r\n\r\n\r\n\r\n// component starts from here\r\n\r\n\r\nfunction ActiveProjects() {\r\n\r\n  const navigate = useNavigate();\r\n  const [projects, setProjects] = useState([]);\r\n  const [popup, setPopup] = useState(false);\r\n  const [selectedProject, setSelectedProject] = useState(\"\");\r\n  const [preview ,setPreview] = useState(false);\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchName, setSearchName] = useState(\"\");\r\n  const [filteredProjects, setFilteredProjects] = useState([]);\r\n\r\n\r\n  // api call to get the table\r\n  useEffect(() => {\r\n    async function fetchTableData() {\r\n      try {\r\n        const response = await axios.get('/api/projects', {\r\n          params: {\r\n            pending: false\r\n          }\r\n        });\r\n        setProjects(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchTableData();\r\n    }, []);\r\n\r\n  useEffect(() => {\r\n      if (searchName) {\r\n        const filtered = projects.filter((project) => project.name.toLowerCase().includes(searchName.toLowerCase()));\r\n        setFilteredProjects(filtered);\r\n      } else {\r\n        setFilteredProjects(projects);\r\n      }\r\n  }, [projects, searchName]);\r\n  \r\n\r\n  const handleClick = (id) => {\r\n      setPopup(true);\r\n      setSelectedProject(id);\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setPreview(false);\r\n  }\r\n\r\n  const handleYes = async() => {\r\n    try {\r\n      console.log(selectedProject)\r\n      const response = await axios.delete('/api/project/'+ selectedProject);\r\n      \r\n      switch (response.status) {\r\n        case (200):\r\n          console.log(\"Deleted successfully\");\r\n          setPopup(false);\r\n          setProjects(projects.filter(p => p._id !== selectedProject));\r\n          setSelectedProject(\"\");\r\n          break;\r\n        case (401):\r\n          console.log(\"Unauthorized to delete\");\r\n          navigate(\"/signin\" , {replace: true});\r\n          break;\r\n\r\n        case(404):\r\n          console.log(\"Cannot find the project\");\r\n          break;\r\n        \r\n        case(500):\r\n          console.log(\"server error\");\r\n          break;\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const handleNo = (event) => {\r\n    setPopup(false);\r\n  }\r\n  \r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSearchNameChange = (event) => {\r\n    setSearchName(event.target.value);\r\n    if (searchName) {\r\n      const filtered = projects.filter((project) => project.name.toLowerCase().includes(searchName.toLowerCase()));\r\n      setFilteredProjects(filtered);\r\n    } else {\r\n      setFilteredProjects(projects);\r\n    }\r\n  }  \r\n\r\n  return (\r\n    <>\r\n      {popup && <ConfirmationPopup message=\"Are you sure you want to delete this item ?\"  onNo={handleNo} onYes={handleYes}/>}\r\n      {preview && <ProjectPreview projectId={selectedProject}  handleClose={handleClose} />}\r\n      \r\n      <StyledPaper>\r\n        <Toolbar sx={{height:\"100px\"}}>\r\n         \r\n         <Typography\r\n           variant=\"h5\"\r\n           noWrap\r\n           component=\"div\"\r\n           sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } , color: \"#0097EB\", fontFamily:\"Poppins\" }}\r\n         >\r\n           Active Projects\r\n         </Typography>\r\n\r\n\r\n          {/*take this */}\r\n         <Search >\r\n           <SearchIconWrapper>\r\n             <SearchOutlinedIcon sx={{color: \"#9F9F9F\"}} />\r\n           </SearchIconWrapper>\r\n           <StyledInputBase\r\n             placeholder=\"Search by Project Name\"\r\n             inputProps={{ 'Poppins': 'search' }}\r\n             value={searchName}\r\n             onChange={handleSearchNameChange}\r\n           />\r\n         </Search>\r\n\r\n         {/*till here */}\r\n         \r\n         <PublishProjectForm data={projects} setData={setProjects} />\r\n         <Box sx={{ml:1.5}} ></Box>\r\n        </Toolbar>\r\n        <TableContainer >\r\n          <Table sx={{ width: '100%' }}>\r\n            <TableHead>\r\n              <TableRow sx={{height:\"30px\" }}>\r\n                <HeaderTableCell sx={{width:\"5%\", paddingLeft:\"25px\"}} >S.No</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"30%\"}} >Project Name</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"30%\"}} >Skills</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"10%\"}} >Created On</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"20%\"}} >Created By</HeaderTableCell>\r\n                <HeaderTableCell sx={{width:\"5%\", paddingRight:\"42px\" }} >Actions</HeaderTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredProjects\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <HoverTableRow key={row._id}>\r\n                      <StyledTableCell sx={{ width:\"5%\", paddingLeft:\"25px\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{index + 1 + page * rowsPerPage}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"30%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{row.name}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"30%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{row.skills}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"10%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{getDate(row.createdAt)}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"20%\"}} onClick={() => {setSelectedProject(row._id); setPreview(true);}} >{row.createdBy}</StyledTableCell>\r\n                      <StyledTableCell sx={{width:\"5%\", paddingRight:\"42px\"}} align=\"center\">\r\n                        <IconButton onClick={() => handleClick(row._id)} color=\"error\">\r\n                          <Delete />\r\n                        </IconButton>\r\n                      </StyledTableCell>\r\n                    </HoverTableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          sx = {{marginRight:\"1.5rem\"}}\r\n          component=\"div\"\r\n          count={projects.length}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          rowsPerPage={rowsPerPage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </StyledPaper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ActiveProjects;\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\Header\\navbar.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\ConfimationPopup.js",["244"],[],"import React, { useState } from 'react';\r\nimport \"../../styles/confirmationForm.css\"\r\n\r\nfunction ConfirmationPopup({ message, onYes, onNo }) {\r\n\r\n  return (\r\n    <div className=\"ConfirmationPopupContainer\">\r\n      <div className=\"ConfirmationPopup\">\r\n        <div className='confirm-message'>{message}</div>\r\n        <div className=\"ConfirmationButtons\">\r\n          <div className='yes'>\r\n            <button className='confirm-yes' onClick={onYes}>Yes</button>\r\n          </div>\r\n          <div className='no'>\r\n            <button className='confirm-no' onClick={onNo}>No</button>\r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfirmationPopup;","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\project\\ProjectPreview.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\CreateCourseForm.js",["245","246","247","248"],[],"import {React, useState} from 'react';\r\nimport \"../../styles/InviteLink.css\";\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction CreateCourseForm({closePopup , handleChange}) {\r\n    const navigate = useNavigate();\r\n    const [name, setName] = useState('');\r\n    const [popup, setPopup] = useState(false);\r\n    const [description, setDescription] = useState(\"\");\r\n\r\n    const [passwordFocused, setPasswordFocused] = useState(false);\r\n    const [passwordHasValue, setPasswordHasValue] = useState(false);\r\n\r\n    const [resourcesFocused, setResourcesFocused] = useState(false);\r\n    const [resourcesHasValue, setResourcesHasValue] = useState(false);\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [hasValue, setHasValue] = useState(false);\r\n\r\n\r\n    const handleFocus = () => {\r\n        setIsFocused(true);\r\n    };\r\n\r\n    const handleBlur = (e) => {\r\n        setIsFocused(false);\r\n        setHasValue(e.target.value !== '');\r\n    };\r\n  \r\n    const handleNameChange = (event) => {\r\n      setName(event.target.value);\r\n    }\r\n  \r\n    const handleDescriptionChange = (event) => {\r\n      setDescription(event.target.value);\r\n    }\r\n\r\n    const handleClose = (event) => {\r\n        setPopup(false)\r\n    }\r\n  \r\n    const handleSave = async() => {\r\n      if (name && description) {\r\n        try {\r\n          const response = await axios.post(\"/api/course\", {\"name\": name, \"description\": description}, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            withCredentials: true\r\n          });          \r\n          switch(response.status) {\r\n            case 201:\r\n              console.log(\"course created successfully\");\r\n              handleChange(response.data);\r\n              setPopup(false);\r\n              break;\r\n            case 400:\r\n                console.log(\"name and description cannot be missing\");\r\n                break;\r\n            case 409:\r\n              console.log(\"course name already exists\");\r\n              break;\r\n            case 401:\r\n              console.log(\"user unauthorized\");\r\n              navigate(\"/signin\", {replace: true});\r\n              break;\r\n            default:\r\n              console.log(\"server error\");\r\n              break;\r\n          }\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      } else {\r\n        //do error handling;\r\n        console.log(\"missing fields\");\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <div>\r\n        <button className='create-course-button' onClick={() => setPopup(true)}>Create a Course</button>\r\n\r\n        {popup && \r\n        (\r\n            <div className='create-course-modal-wrapper'> \r\n              <div className=\"create-course-modal-content\" >\r\n\r\n              <div className='create-course-top'>\r\n\r\n                    <div className='create-course-title'>\r\n                          <span>Create a Course</span>\r\n                    </div>\r\n                   \r\n                    {/* Close icon goes here */}\r\n                    <div className='create-course-close-wrapper'>\r\n                            <div className='create-course-close' onClick={handleClose}>\r\n                               <div className='create-course-close-button'> \r\n                                    <svg className='cSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\" viewBox=\"0 0 14 14\">\r\n                                        <path id=\"ic_close_24px\" d=\"M19,6.41,17.59,5,12,10.59,6.41,5,5,6.41,10.59,12,5,17.59,6.41,19,12,13.41,17.59,19,19,17.59,13.41,12Z\" transform=\"translate(-5 -5)\"/>\r\n                                    </svg>\r\n                              </div>\r\n                            </div>\r\n                    </div>\r\n              </div>\r\n\r\n\r\n                    <div className=\"create-course-input-name\">\r\n                      <label className={`create-course-input-name-label ${passwordFocused  || passwordHasValue ? 'focused' : ''}`}>Course Name</label>\r\n                      <input className=\"create-course-input-name-input\"\r\n                                          onFocus={() => setPasswordFocused(true)}\r\n                                          onBlur={(e) => {\r\n                                                              setPasswordFocused(false);\r\n                                                              setPasswordHasValue(e.target.value !== '');\r\n                                                          }}\r\n                                          type=\"text\"\r\n                                          id=\"name\" required value={name} onChange={handleNameChange} />\r\n                    </div>\r\n\r\n                   <div className=\"create-course-input-desc\">\r\n                              <label className={`create-course-input-desc-label ${resourcesFocused  || resourcesHasValue ? 'focused' : ''}`}>\r\n                                Course Description\r\n                              </label>\r\n                              <textarea\r\n                                className=\"create-course-input-desc-input\"\r\n                                onFocus={() => setResourcesFocused(true)}\r\n                                onBlur={(e) => {\r\n                                  setResourcesFocused(false);\r\n                                  setResourcesHasValue(e.target.value !== '');\r\n                                }}\r\n                                id=\"description\"\r\n                                value={description}\r\n                                required\r\n                                onChange={handleDescriptionChange}\r\n                                rows=\"5\"\r\n                              />\r\n                    </div>\r\n\r\n                    <div className=\"create-course-button-group\">\r\n                      <button className=\"create-course-save-button\" onClick={handleSave}>Save</button>\r\n                    </div>\r\n              </div>\r\n            </div>\r\n        )}\r\n      </div>\r\n    );\r\n} \r\n  \r\n\r\nexport default CreateCourseForm;\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\PublishProjectForm.js",["249","250"],[],"import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../../styles/PublishProjectForm.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst PublishProjectForm = ({data, setData}) => {\r\n  const navigate = useNavigate();\r\n  const [popup, setPopup] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [projectTitle, setProjectTitle] = useState(\"\");\r\n  const [projectDeadline, setProjectDeadline] = useState(\"\");\r\n  const [projectAdmins, setProjectAdmins] = useState(\"\");\r\n  const [projectDescription, setProjectDescription] = useState(\"\");\r\n  const [projectSkills, setProjectSkills] = useState(\"\");\r\n  const [projectResources, setProjectResources] = useState(\"\");\r\n  const [projectAttachments, setProjectAttachments] = useState();\r\n  const [selectedFileName, setSelectedFileName] = useState('');\r\n\r\n\r\n    const [subjectIDFocused, setSubjectIDFocused] = useState(false);\r\n    const [subjectIDHasValue, setSubjectIDHasValue] = useState(false);\r\n\r\n    const [studentIDFocused, setStudentIDFocused] = useState(false);\r\n    const [studentIDHasValue, setstudentIDHasValue] = useState(false);\r\n\r\n    const [passwordFocused, setPasswordFocused] = useState(false);\r\n    const [passwordHasValue, setPasswordHasValue] = useState(false);\r\n\r\n    const [resourcesFocused, setResourcesFocused] = useState(false);\r\n    const [resourcesHasValue, setResourcesHasValue] = useState(false);\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [hasValue, setHasValue] = useState(false);\r\n\r\n    const [selectedDate, setSelectedDate] = useState('');\r\n\r\n    function handleDateChange(event) {\r\n        setSelectedDate(event.target.value);\r\n    }\r\n\r\n    const chooseFile = () => {\r\n      document.getElementById('projectAttachments').click();\r\n    }\r\n\r\n    const handleFocus = () => {\r\n        setIsFocused(true);\r\n    };\r\n\r\n    const handleBlur = (e) => {\r\n        setIsFocused(false);\r\n        setHasValue(e.target.value !== '');\r\n    };\r\n\r\n  const handleProjectTitleChange = (event) => {\r\n    setProjectTitle(event.target.value);\r\n  };\r\n\r\n  const handleProjectDeadlineChange = (event) => {\r\n    setProjectDeadline(event.target.value);\r\n  };\r\n\r\n  const handleProjectAdminsChange = (event) => {\r\n    setProjectAdmins(event.target.value);\r\n  };\r\n\r\n  const handleProjectDescriptionChange = (event) => {\r\n    setProjectDescription(event.target.value);\r\n  };\r\n\r\n  const handleProjectSkillsChange = (event) => {\r\n    setProjectSkills(event.target.value);\r\n  };\r\n\r\n  const handleProjectResourcesChange = (event) => {\r\n    setProjectResources(event.target.value);\r\n  };\r\n\r\n  const handleProjectAttachmentsChange = (event) => {\r\n    const file = event.target.files[0];\r\n  if (file) {\r\n    setSelectedFileName(file.name);\r\n  } else {\r\n    setSelectedFileName('');\r\n  }\r\n    setProjectAttachments(event.target.files[0]);\r\n  };\r\n\r\n  const handleNextPage = (event) => {\r\n    event.preventDefault();\r\n    setCurrentPage(currentPage + 1);\r\n  };\r\n\r\n  const handlePrevPage = (event) => {\r\n    event.preventDefault();\r\n    setCurrentPage(currentPage - 1);\r\n  };\r\n\r\n  const sendToApi = async() => {\r\n    if (\r\n      projectTitle &&\r\n      projectDeadline &&\r\n      projectAdmins &&\r\n      projectDescription &&\r\n      projectSkills &&\r\n      projectResources &&\r\n      projectAttachments\r\n    ) {\r\n      const formData = new FormData();\r\n      formData.set('name', projectTitle);\r\n      formData.set('administrators', projectAdmins);\r\n      formData.set('description', projectDescription);\r\n      formData.set('skills', projectSkills);\r\n      formData.set('resources', projectResources);\r\n      formData.set('deadline', projectDeadline);\r\n      if (projectAttachments !== null) { // check if projectAttachments is not null\r\n        formData.append('file', projectAttachments);\r\n      } else {\r\n        console.log(\"file is null\");\r\n      }\r\n      \r\n      try {\r\n        const response = await axios.post('/api/project', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        });\r\n        \r\n        if (response.status === 201) {\r\n          setData([response.data, ...data]);\r\n          setCurrentPage(currentPage + 1);\r\n        }\r\n        \r\n      } catch (error) {\r\n        switch (error.response.status) {\r\n          case 401:\r\n            navigate(\"/signin\", { replace: true });\r\n            break;\r\n          case 400:\r\n            console.log(\"missing fields\");\r\n            break;\r\n          case 500:\r\n            console.log(\"internal error\");\r\n            break;\r\n          default:\r\n            console.log(\"unexpected error\");\r\n        }\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await sendToApi();\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    setPopup(false);\r\n  };\r\n\r\n  const pageOne = () => {\r\n    return (\r\n      <div className=\"project-form-p1-container\">\r\n\r\n                        <div className='project-form-p1-progress'>\r\n                                    <div className='project-form-p1-progress-one'> \r\n                                        <svg className='project-form-p2-progress-one-svg' xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                          <g id=\"one\" transform=\"translate(-687 -275)\">\r\n                                            <circle id=\"Ellipse_2\" data-name=\"Ellipse 2\" cx=\"12\" cy=\"12\" r=\"12\" transform=\"translate(687 275)\" fill=\"#0097eb\"/>\r\n                                            <text id=\"_1\" data-name=\"1\" transform=\"translate(697 292)\" fill=\"#fff\" font-size=\"14\" font-family=\"Poppins-Regular, Poppins\"><tspan x=\"0\" y=\"0\">1</tspan></text>\r\n                                          </g>\r\n                                        </svg>\r\n                                    </div>\r\n\r\n                                    <div className='project-form-p1-progress-first-line'> \r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"227.835\" height=\"2\" viewBox=\"0 0 227.835 2\">\r\n                                          <path id=\"first-grey-line\" d=\"M-4537.775,3601h225.835\" transform=\"translate(4538.775 -3600)\" fill=\"none\" stroke=\"#9f9f9f\" stroke-linecap=\"round\" stroke-width=\"2\"/>\r\n                                        </svg>\r\n                                    </div>\r\n\r\n                                    <div className='project-form-p1-progress-two'> \r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                          <g id=\"two-grey-bg\" transform=\"translate(-948 -275)\">\r\n                                            <circle id=\"Ellipse_3\" data-name=\"Ellipse 3\" cx=\"12\" cy=\"12\" r=\"12\" transform=\"translate(948 275)\" fill=\"#9f9f9f\"/>\r\n                                            <text id=\"_2\" data-name=\"2\" transform=\"translate(956 292)\" fill=\"#fff\" font-size=\"14\" font-family=\"Poppins-Regular, Poppins\"><tspan x=\"0\" y=\"0\">2</tspan></text>\r\n                                          </g>\r\n                                        </svg>\r\n                                    </div>\r\n\r\n                                    <div className='project-form-p1-progress-second-line'> \r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"227.835\" height=\"2\" viewBox=\"0 0 227.835 2\">\r\n                                          <path id=\"second-grey-line\" d=\"M-4537.775,3601h225.835\" transform=\"translate(4538.775 -3600)\" fill=\"none\" stroke=\"#9f9f9f\" stroke-linecap=\"round\" stroke-width=\"2\"/>\r\n                                        </svg>\r\n                                    </div>\r\n\r\n                                    <div className='project-form-p1-progress-three'> \r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                          <g id=\"three-grey-bg\" transform=\"translate(-1209 -275)\">\r\n                                            <circle id=\"Ellipse_4\" data-name=\"Ellipse 4\" cx=\"12\" cy=\"12\" r=\"12\" transform=\"translate(1209 275)\" fill=\"#9f9f9f\"/>\r\n                                            <text id=\"_3\" data-name=\"3\" transform=\"translate(1217 292)\" fill=\"#fff\" font-size=\"14\" font-family=\"Poppins-Regular, Poppins\"><tspan x=\"0\" y=\"0\">3</tspan></text>\r\n                                          </g>\r\n                                        </svg>\r\n                                    </div>\r\n                        </div>\r\n\r\n                        <div className='project-form-p1-progress-title'> \r\n                                    <span   class='project-form-p2-progress-title-text'>General Information</span>\r\n                        </div>\r\n\r\n\r\n\r\n        <form className=\"project-form-page01\" onSubmit={handleNextPage}>\r\n\r\n\r\n\r\n          <div className='project-form-page01-fullName-ID'> \r\n\r\n            <label htmlFor=\"projectTitle\" className={`project-form-page01-fullName-ID-label ${subjectIDFocused  || subjectIDHasValue ? 'focused' : ''}`}>Project Title</label>\r\n            <input\r\n              className=\"project-form-page01-fullName-ID-input\"\r\n              type=\"text\"\r\n              id=\"projectTitle\"\r\n              name=\"projectTitle\"\r\n              value={projectTitle}\r\n              onChange={handleProjectTitleChange}\r\n              required\r\n              onFocus={() => setSubjectIDFocused(true)}\r\n              onBlur={(e) => {\r\n                                setSubjectIDFocused(false);\r\n                                setSubjectIDHasValue(e.target.value !== '');\r\n                              }}\r\n            />\r\n          </div>\r\n\r\n\r\n          <div className='formProject-p1-date'> \r\n\r\n            <label htmlFor=\"projectDeadline\" className={`formProject-p1-date-label ${isFocused || hasValue ? 'focused' : ''}`}>Expected Project Deadline</label>\r\n            <input\r\n              type=\"date\"\r\n              id=\"projectDeadline\"\r\n              name=\"projectDeadline\"\r\n              value={projectDeadline}\r\n              onChange={handleProjectDeadlineChange}\r\n              required\r\n              className={`formProject-p1-date-input ${isFocused || hasValue ? 'focused' : ''}`}\r\n              onFocus={handleFocus}\r\n              onBlur={handleBlur}\r\n            />\r\n\r\n          </div>\r\n\r\n          <div className='formProject01-Admins'>      \r\n\r\n              <label htmlFor=\"projectAdmins\" className={`formProject01-Admins-label ${studentIDFocused  || studentIDHasValue ? 'focused' : ''}`}>Project Administrators</label>\r\n              \r\n              <input\r\n                type=\"text\"\r\n                id=\"projectAdmins\"\r\n                name=\"projectAdmins\"\r\n                value={projectAdmins}\r\n                onChange={handleProjectAdminsChange}\r\n                required\r\n                className=\"formProject01-Admins-input\"\r\n                onFocus={() => setStudentIDFocused(true)}\r\n                onBlur={(e) => {\r\n                    setStudentIDFocused(false);\r\n                    setstudentIDHasValue(e.target.value !== '');\r\n                }}\r\n              />\r\n          </div>\r\n\r\n            <div className='formProject01-message'>\r\n\r\n                  <label htmlFor=\"projectDescription\" className={`formProject01-message-label ${passwordFocused  || passwordHasValue ? 'focused' : ''}`}>Project Description</label>\r\n                  <textarea\r\n                    id=\"projectDescription\"\r\n                    name=\"projectDescription\"\r\n                    value={projectDescription}\r\n                    onChange={handleProjectDescriptionChange}\r\n                    required\r\n                    className=\"formProject01-message-input\"\r\n                      onFocus={() => setPasswordFocused(true)}\r\n                      onBlur={(e) => {\r\n                                          setPasswordFocused(false);\r\n                                          setPasswordHasValue(e.target.value !== '');\r\n                                      }}\r\n                  />\r\n\r\n            </div>\r\n\r\n            <div className=\"project-form-p1-buttons\">\r\n              <button className=\"project-form-p1-continue\" type=\"submit\">Continue</button>\r\n            </div>\r\n          </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const pageTwo = () => {\r\n    return (\r\n      <div className=\"project-form-p2-container\">\r\n\r\n                        <div className='project-form-p2-progress'>\r\n\r\n                                    <div className='project-form-p2-progress-one'> \r\n                                        <svg className='project-form-p2-progress-one-svg' xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                          <g id=\"one\" transform=\"translate(-687 -275)\">\r\n                                            <circle id=\"Ellipse_2\" data-name=\"Ellipse 2\" cx=\"12\" cy=\"12\" r=\"12\" transform=\"translate(687 275)\" fill=\"#0097eb\"/>\r\n                                            <text id=\"_1\" data-name=\"1\" transform=\"translate(697 292)\" fill=\"#fff\" font-size=\"14\" font-family=\"Poppins-Regular, Poppins\"><tspan x=\"0\" y=\"0\">1</tspan></text>\r\n                                          </g>\r\n                                        </svg>\r\n                                    </div>\r\n\r\n                                    <div className='project-form-p2-progress-first-line'> \r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"227.835\" height=\"2\" viewBox=\"0 0 227.835 2\">\r\n                                          <path id=\"one-two-line\" d=\"M-4537.775,3601h225.835\" transform=\"translate(4538.775 -3600)\" fill=\"none\" stroke=\"#0097eb\" stroke-linecap=\"round\" stroke-width=\"2\"/>\r\n                                        </svg>\r\n                                    </div>\r\n\r\n                                    <div className='project-form-p2-progress-two'> \r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                          <g id=\"two\" transform=\"translate(-948 -275)\">\r\n                                            <circle id=\"Ellipse_3\" data-name=\"Ellipse 3\" cx=\"12\" cy=\"12\" r=\"12\" transform=\"translate(948 275)\" fill=\"#0097eb\"/>\r\n                                            <text id=\"_2\" data-name=\"2\" transform=\"translate(956 292)\" fill=\"#fff\" font-size=\"14\" font-family=\"Poppins-Regular, Poppins\"><tspan x=\"0\" y=\"0\">2</tspan></text>\r\n                                          </g>\r\n                                        </svg>\r\n                                    </div>\r\n\r\n                                    <div className='project-form-p2-progress-second-line'> \r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"227.835\" height=\"2\" viewBox=\"0 0 227.835 2\">\r\n                                          <path id=\"second-grey-line\" d=\"M-4537.775,3601h225.835\" transform=\"translate(4538.775 -3600)\" fill=\"none\" stroke=\"#9f9f9f\" stroke-linecap=\"round\" stroke-width=\"2\"/>\r\n                                        </svg>\r\n                                    </div>\r\n\r\n                                    <div className='project-form-p2-progress-three'> \r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                          <g id=\"three-grey-bg\" transform=\"translate(-1209 -275)\">\r\n                                            <circle id=\"Ellipse_4\" data-name=\"Ellipse 4\" cx=\"12\" cy=\"12\" r=\"12\" transform=\"translate(1209 275)\" fill=\"#9f9f9f\"/>\r\n                                            <text id=\"_3\" data-name=\"3\" transform=\"translate(1217 292)\" fill=\"#fff\" font-size=\"14\" font-family=\"Poppins-Regular, Poppins\"><tspan x=\"0\" y=\"0\">3</tspan></text>\r\n                                          </g>\r\n                                        </svg>\r\n                                    </div>\r\n                        </div>\r\n\r\n                        <div className='project-form-p2-progress-title'> \r\n                                    <span   class='project-form-p2-progress-title-text'>Skills, Technologies & Resources</span>\r\n                        </div>\r\n\r\n                        <form className=\"project-form-page02\" onSubmit={handleNextPage}>\r\n\r\n                                <div className=\"formProject02-skills\"> \r\n\r\n                                    <label htmlFor=\"projectSkills\" className={`formProject02-skills-label ${passwordFocused  || passwordHasValue ? 'focused' : ''}`}>Skills & Technologies Required</label>\r\n                                    <textarea\r\n                                      id=\"projectSkills\"\r\n                                      name=\"projectSkills\"\r\n                                      value={projectSkills}\r\n                                      onChange={handleProjectSkillsChange}\r\n                                      required\r\n                                      className=\"formProject02-skills-input\"\r\n                                          onFocus={() => setPasswordFocused(true)}\r\n                                          onBlur={(e) => {\r\n                                                              setPasswordFocused(false);\r\n                                                              setPasswordHasValue(e.target.value !== '');\r\n                                                          }}\r\n                                    />\r\n\r\n                                </div>\r\n\r\n\r\n                                <div className=\"formProject02-resources\"> \r\n                                \r\n                                      <label htmlFor=\"projectResources\" className={`formProject02-resources-label ${resourcesFocused  || resourcesHasValue ? 'focused' : ''}`}>Resources Required</label>\r\n                                      <textarea\r\n                                        id=\"projectResources\"\r\n                                        name=\"projectResources\"\r\n                                        value={projectResources}\r\n                                        onChange={handleProjectResourcesChange}\r\n                                        required\r\n                                        className=\"formProject02-resources-input\"\r\n                                          onFocus={() => setResourcesFocused(true)}\r\n                                          onBlur={(e) => {\r\n                                                              setResourcesFocused(false);\r\n                                                              setResourcesHasValue(e.target.value !== '');\r\n                                                          }}\r\n                                      />\r\n\r\n                                </div>\r\n\r\n                            \r\n                                <div className=\"project-form-p2-buttons\">\r\n\r\n                                    <div className=\"formProject02-previous\"> \r\n                                      <button className=\"project-form-p2-previous\" onClick={handlePrevPage}>Previous</button>\r\n                                    </div>\r\n\r\n                                    <div className=\"formProject02-continue\"> \r\n                                    <button className=\"project-form-p2-continue\" type=\"submit\">Continue</button>\r\n                                    </div> \r\n                                    \r\n                                </div>\r\n\r\n                \r\n                        </form>\r\n          </div>\r\n    )\r\n  }\r\n\r\n  const pageThree = () => {\r\n    return (\r\n      <div className=\"project-form-p3-container\">\r\n        <form onSubmit={handleSubmit}>\r\n            \r\n                               <div className='project-form-p2-progress'>\r\n\r\n                                                      <div className='project-form-p3-progress-one'> \r\n                                                          <svg className='project-form-p3-progress-one-svg' xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                                            <g id=\"one\" transform=\"translate(-687 -275)\">\r\n                                                              <circle id=\"Ellipse_2\" data-name=\"Ellipse 2\" cx=\"12\" cy=\"12\" r=\"12\" transform=\"translate(687 275)\" fill=\"#0097eb\"/>\r\n                                                              <text id=\"_1\" data-name=\"1\" transform=\"translate(697 292)\" fill=\"#fff\" font-size=\"14\" font-family=\"Poppins-Regular, Poppins\"><tspan x=\"0\" y=\"0\">1</tspan></text>\r\n                                                            </g>\r\n                                                          </svg>\r\n                                                      </div>\r\n\r\n                                                      <div className='project-form-p3-progress-first-line'> \r\n                                                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"227.835\" height=\"2\" viewBox=\"0 0 227.835 2\">\r\n                                                            <path id=\"one-two-line\" d=\"M-4537.775,3601h225.835\" transform=\"translate(4538.775 -3600)\" fill=\"none\" stroke=\"#0097eb\" stroke-linecap=\"round\" stroke-width=\"2\"/>\r\n                                                          </svg>\r\n                                                      </div>\r\n\r\n                                                      <div className='project-form-p3-progress-two'> \r\n                                                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                                            <g id=\"two\" transform=\"translate(-948 -275)\">\r\n                                                              <circle id=\"Ellipse_3\" data-name=\"Ellipse 3\" cx=\"12\" cy=\"12\" r=\"12\" transform=\"translate(948 275)\" fill=\"#0097eb\"/>\r\n                                                              <text id=\"_2\" data-name=\"2\" transform=\"translate(956 292)\" fill=\"#fff\" font-size=\"14\" font-family=\"Poppins-Regular, Poppins\"><tspan x=\"0\" y=\"0\">2</tspan></text>\r\n                                                            </g>\r\n                                                          </svg>\r\n                                                      </div>\r\n\r\n                                                      <div className='project-form-p3-progress-second-line'> \r\n                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"227.835\" height=\"2\" viewBox=\"0 0 227.835 2\">\r\n                                                          <path id=\"two-three-line\" d=\"M-4537.775,3601h225.835\" transform=\"translate(4538.775 -3600)\" fill=\"none\" stroke=\"#0097eb\" stroke-linecap=\"round\" stroke-width=\"2\"/>\r\n                                                        </svg>\r\n                                                      </div>\r\n\r\n                                                      <div className='project-form-p3-progress-three'> \r\n                                                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                                            <g id=\"three\" transform=\"translate(-1209 -275)\">\r\n                                                              <circle id=\"Ellipse_4\" data-name=\"Ellipse 4\" cx=\"12\" cy=\"12\" r=\"12\" transform=\"translate(1209 275)\" fill=\"#0097eb\"/>\r\n                                                              <text id=\"_3\" data-name=\"3\" transform=\"translate(1217 292)\" fill=\"#fff\" font-size=\"14\" font-family=\"Poppins-Regular, Poppins\"><tspan x=\"0\" y=\"0\">3</tspan></text>\r\n                                                            </g>\r\n                                                          </svg>\r\n                                                      </div>\r\n\r\n\r\n                               </div>\r\n\r\n                               <div className='project-form-p3-progress-title'> \r\n                                                        <span   class='project-form-p3-progress-title-text'>Additional Information</span>\r\n                              </div>\r\n\r\n            <div className=\"attachment-container\">\r\n\r\n                                <div className='uploadFile'>\r\n                                    <svg className='uploadSvg'   xmlns=\"http://www.w3.org/2000/svg\" width=\"155.48\" height=\"115.653\" viewBox=\"0 0 119.48 79.653\">\r\n                                      <path id=\"ic_cloud_upload_24px\" d=\"M96.331,34.069a37.3,37.3,0,0,0-69.7-9.957A29.858,29.858,0,0,0,29.87,83.653H94.588a24.82,24.82,0,0,0,1.742-49.584ZM69.7,48.8V68.718H49.783V48.8H34.848L59.74,23.913,84.632,48.8Z\" transform=\"translate(0 -4)\" fill=\"#2b6d95\" opacity=\"0.403\"/>\r\n                                    </svg>\r\n                                </div>\r\n\r\n                                <div className='uploadFile-instructions'>\r\n                                  \r\n                                    <span className='instructions-01'>Drag & drop files here</span>\r\n                                    <span className='instructions-02'>(Please upload a PDF file, less than 25 MB)</span>\r\n\r\n                                </div>\r\n\r\n                  \r\n                                <div className=\"file-input-wrapper\">\r\n                                  <input type=\"file\" id=\"projectAttachments\" name=\"file\" onChange={handleProjectAttachmentsChange} accept=\"application/pdf\" required />\r\n                                  <button className=\"custom-file-button\" onClick={chooseFile}>Choose File</button>\r\n                                  {selectedFileName && <span className=\"selected-file-name\">{selectedFileName}</span>}\r\n                                </div>\r\n\r\n                  </div>\r\n\r\n            <div className=\"form-buttons\">\r\n              \r\n              \r\n                  <div className=\"project-form-p3-buttons\">\r\n\r\n                                        <div className=\"formProject03-previous\"> \r\n                                          <button className=\"project-form-p3-previous\" onClick={handlePrevPage}>Previous</button>\r\n                                        </div>\r\n\r\n                                        <div className=\"formProject03-submit\"> \r\n                                           <button className=\"project-form-p3-submit\" type=\"submit\">Submit</button>\r\n                                        </div> \r\n                                        \r\n                  </div>\r\n            </div>\r\n          </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const confirmationPage = () => {\r\n    return (\r\n    <>\r\n      <div className=\"project-form-p4-container\">\r\n        <div className=\"project-attachment-container\">\r\n\r\n                                <div className='thumbsup'>\r\n                                  <svg className='upSvg' width=\"200px\" height=\"200px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <path d=\"M20.1818 9.36364H14.4455L15.3091 5.20909L15.3364 4.91818C15.3364 4.54545 15.1818 4.2 14.9364 3.95455L13.9727 3L7.99091 8.99091C7.65455 9.31818 7.45455 9.77273 7.45455 10.2727V19.3636C7.45455 20.3636 8.27273 21.1818 9.27273 21.1818H17.4545C18.2091 21.1818 18.8545 20.7273 19.1273 20.0727L21.8727 13.6636C21.9545 13.4545 22 13.2364 22 13V11.1818C22 10.1818 21.1818 9.36364 20.1818 9.36364Z\" fill=\"#000000\"/>\r\n                                    <path d=\"M5.63636 10.2727H2V21.1818H5.63636V10.2727Z\" fill=\"#000000\"/>\r\n                                  </svg>\r\n                                </div>\r\n\r\n            <div className=\"successfully\"> \r\n              <p>Project created successfully!</p>\r\n            </div>\r\n          \r\n          </div>\r\n\r\n        <div>\r\n          <button className=\"finish\" onClick={()=>{setPopup(false); setCurrentPage(1);}}>Finish</button>\r\n        </div>\r\n      </div>\r\n    </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button className=\"create-project\" onClick={() => setPopup(true)}>Create Project</button>\r\n      \r\n    \r\n        {popup &&\r\n          (<div className=\"form-popup-bg\">\r\n                <div className={`form-popup ${currentPage === 1 ? \"page1\" : currentPage === 2 ? \"page2\" : \"page3\"}`}>\r\n                  \r\n\r\n                    <div className='project-form-popup-header'>\r\n                            \r\n                            {/* Title goes here */}\r\n                    \r\n                              <div className='project-form-popup-title'> \r\n                                  <span class='project-form-popup-title-01'>Publish a Project</span>\r\n                              </div>\r\n              \r\n\r\n                            {/* Close icon goes here */}\r\n                            <div className='project-form-popup-close-1' onClick={handleClose}>\r\n                                <div className='project-form-popup-close-button-1'> \r\n                                  <svg className='cSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\">\r\n                                      <path id=\"ic_close_24px\" d=\"M19,6.41,17.59,5,12,10.59,6.41,5,5,6.41,10.59,12,5,17.59,6.41,19,12,13.41,17.59,19,19,17.59,13.41,12Z\" transform=\"translate(-5 -5)\"/>\r\n                                  </svg>\r\n                                </div>\r\n                            </div>\r\n\r\n                    </div>\r\n\r\n\r\n                  {currentPage === 1 && pageOne()}\r\n                  {currentPage === 2 && pageTwo()}\r\n                  {currentPage === 3 && pageThree()}\r\n                  {currentPage === 4 && confirmationPage()}\r\n                </div>\r\n          </div>\r\n          )}\r\n      \r\n    </>\r\n );\r\n};\r\n\r\nexport default PublishProjectForm;\r\n\r\n             \r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\SelectProjectsForCourse.js",["251"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../../styles/SelectProjects.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ErrorMessagePopup from \"./ErrorMessagePopup\";\r\n\r\nexport default function SelectProjectsForCourse({ projects , name, setData}) {\r\n\r\n\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedProjects, setSelectedProjects] = useState([]);\r\n  const [allProjects, setAllProjects] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // set the initially selected projects\r\n    setSelectedProjects(projects.map((project) => project._id));\r\n    \r\n    async function getAllProjects() {\r\n        try {\r\n            const response = await axios.get(\"/api/projects\");\r\n            setAllProjects(response.data);\r\n        } catch (err) {\r\n            navigate('/signin', {replace: true});\r\n        }\r\n    }\r\n\r\n    getAllProjects();\r\n\r\n  }, [projects, navigate]);\r\n\r\n  const handleProjectSelection = (event) => {\r\n    const projectId = event.target.value;\r\n    if (event.target.checked) {\r\n      setSelectedProjects((prevState) => [...prevState, projectId]);\r\n    } else {\r\n      setSelectedProjects((prevState) =>\r\n        prevState.filter((id) => id !== projectId)\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async() => {\r\n    try {\r\n        \r\n        console.log(selectedProjects);\r\n        const response = await axios.put(`/api/courses/${name}`, { projects: selectedProjects },\r\n        { headers: { 'Content-Type': 'application/json' } });\r\n        \r\n\r\n        if (response.status === 200) {\r\n            setData(response.data);\r\n            onClose();\r\n        }\r\n        \r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n  };\r\n\r\n  const onClose = () => {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n    \r\n    <button className=\"project-select-button\"  onClick={()=>setOpen(true)}> Add Projects </button>\r\n    {open && \r\n      (\r\n                <div className='project-select-modal-wrapper'> \r\n\r\n                  <div className=\"project-select-popup-content\">\r\n\r\n                    <div className=\"project-select-top\"> \r\n\r\n                          <div className='project-select-title'>\r\n                                  <span>Assign projects</span>\r\n                            </div>\r\n                          \r\n                            {/* Close icon goes here */}\r\n                            <div className='project-select-close-wrapper'>\r\n                                    <div className='project-select-close' onClick={onClose}>\r\n                                      <div className='project-select-close-button'> \r\n                                            <svg className='cSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\" viewBox=\"0 0 14 14\">\r\n                                                <path id=\"ic_close_24px\" d=\"M19,6.41,17.59,5,12,10.59,6.41,5,5,6.41,10.59,12,5,17.59,6.41,19,12,13.41,17.59,19,19,17.59,13.41,12Z\" transform=\"translate(-5 -5)\"/>\r\n                                            </svg>\r\n                                      </div>\r\n                                    </div>\r\n                            </div>\r\n                    </div>\r\n\r\n                    <div className=\"project-select-list-wrapper\">\r\n                      <table className=\"project-select-list\">\r\n                        <thead>\r\n                          <tr>\r\n                            <td className=\"project-select-check\">Select</td>\r\n                            <td className=\"project-select-name\" >Project Name</td>\r\n                            <td>Creator</td>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {allProjects.map((project) => {\r\n                            const isChecked = selectedProjects.includes(project._id);\r\n                            return (\r\n                              <tr className=\"project-select-item\" key={project._id}>\r\n                                <td className=\"project-select-check\">\r\n                                  <input\r\n                                   className=\"check-box\"\r\n                                    type=\"checkbox\"\r\n                                    value={project._id}\r\n                                    checked={isChecked}\r\n                                    onChange={handleProjectSelection}\r\n                                  />\r\n                                </td>\r\n                                <td className=\"project-select-name\">{project.name}</td>\r\n                                <td className=\"project-select-creator\">{project.createdBy}</td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                        </tbody>\r\n                      </table>\r\n\r\n                      \r\n                    </div>\r\n\r\n                    <div className=\"just-a-blob\">transparent blob x transparent blob</div>\r\n\r\n                    <div className=\"Preferences-set-button-group\">\r\n                      <button  className=\"Preferences-set-save-button\" onClick={handleSubmit}>Submit</button>\r\n                    </div>\r\n\r\n\r\n                  </div>\r\n\r\n              </div>\r\n\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\InviteClients.js",["252","253","254","255"],[],"import {React, useState} from 'react';\r\nimport \"../../styles/InviteLink.css\";\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction InviteClient({handleChange}) {\r\n    const navigate = useNavigate();\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [show, setShow] = useState(false);\r\n\r\n    const [passwordFocused, setPasswordFocused] = useState(false);\r\n    const [passwordHasValue, setPasswordHasValue] = useState(false);\r\n\r\n    const [resourcesFocused, setResourcesFocused] = useState(false);\r\n    const [resourcesHasValue, setResourcesHasValue] = useState(false);\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [hasValue, setHasValue] = useState(false);\r\n\r\n\r\n    const handleFocus = () => {\r\n        setIsFocused(true);\r\n    };\r\n\r\n    const handleBlur = (e) => {\r\n        setIsFocused(false);\r\n        setHasValue(e.target.value !== '');\r\n    };\r\n  \r\n    const handleNameChange = (event) => {\r\n      setName(event.target.value);\r\n    }\r\n  \r\n    const handleEmailChange = (event) => {\r\n      setEmail(event.target.value);\r\n    }\r\n  \r\n    const handleSave = async() => {\r\n      // do something with the name and email data, e.g. submit to server\r\n      console.log('Name:', name);\r\n      console.log('Email:', email);\r\n\r\n      if (name && email) {\r\n        try {\r\n          const response = await axios.post(\"/api/user?returning=true\", {\"name\": name, \"email\": email, role: \"CLIENT\", password: \"testing\"}, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });          \r\n          switch(response.status) {\r\n            case 200:\r\n              console.log(\"user created successfully\");\r\n              handleChange(response.data);\r\n              setShow(false);\r\n              break;\r\n            case 409:\r\n              console.log(\"user already exists\");\r\n              break;\r\n            case 401:\r\n              console.log(\"user unauthorized\");\r\n              navigate(\"/signin\", {replace: true});\r\n              break;\r\n            case 400:\r\n              console.log(response.data);\r\n              break;\r\n            default:\r\n              console.log(\"server error\");\r\n              break;\r\n          }\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      } else {\r\n        //do error handling;\r\n        console.log(\"missing fields\");\r\n      }\r\n    }\r\n  \r\n    const handleOpenModal = () => {\r\n      setShow(true);\r\n    }\r\n  \r\n    return (\r\n      <div>\r\n\r\n          <div> <button className=\"invite-client\" onClick={handleOpenModal}>Add a Client</button> </div>\r\n            \r\n            <div className=\"client-form-modal\" style={{ display: show ? 'block' : 'none', position: 'absolute', zIndex: '999' }}>\r\n\r\n                  <div className='client-form-modal-wrapper'>  \r\n\r\n                    <div className=\"client-form-modal-content\">\r\n\r\n\r\n\r\n                        {/* clien-form-top */}\r\n                        <div className='client-form-top'>\r\n\r\n                              {/* form-title */}\r\n                              <div className='client-form-title'>\r\n                                  <span>Add a Client</span>\r\n                              </div>\r\n\r\n                              {/* Close icon goes here */}\r\n                              <div className='client-form-close-wrapper'>\r\n                                                  <div className='client-form-close' onClick={() => setShow(false)}>\r\n                                                      <div className='client-form-close-button'> \r\n                                                          <svg className='cSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\" viewBox=\"0 0 14 14\">\r\n                                                              <path id=\"ic_close_24px\" d=\"M19,6.41,17.59,5,12,10.59,6.41,5,5,6.41,10.59,12,5,17.59,6.41,19,12,13.41,17.59,19,19,17.59,13.41,12Z\" transform=\"translate(-5 -5)\"/>\r\n                                                          </svg>\r\n                                                      </div>\r\n                                                  </div>\r\n                              </div>\r\n\r\n                        </div>\r\n                          \r\n                          {/* input-name */}\r\n                          <div className=\"client-form-input-name\">\r\n\r\n                            <label className={`client-form-input-name-label ${passwordFocused  || passwordHasValue ? 'focused' : ''}`}>Client Full Name</label>\r\n\r\n                            <input className=\"client-form-input-name-input\"\r\n                                          onFocus={() => setPasswordFocused(true)}\r\n                                          onBlur={(e) => {\r\n                                                              setPasswordFocused(false);\r\n                                                              setPasswordHasValue(e.target.value !== '');\r\n                                                          }}\r\n                                          type=\"text\" id=\"name\" required value={name} onChange={handleNameChange} />\r\n\r\n                          </div>\r\n                          \r\n                          {/* input-email */}\r\n                          <div className=\"client-form-input-email\">\r\n\r\n                            <label className={`client-form-input-email-label ${resourcesFocused  || resourcesHasValue ? 'focused' : ''}`}>Client Email ID</label>\r\n                            <input className=\"client-form-input-email-input\"\r\n                                            onFocus={() => setResourcesFocused(true)}\r\n                                            onBlur={(e) => {\r\n                                                              setResourcesFocused(false);\r\n                                                              setResourcesHasValue(e.target.value !== '');\r\n                                                          }}\r\n                                            type=\"email\" id=\"email\" value={email} required onChange={handleEmailChange} />\r\n\r\n                          </div>\r\n\r\n\r\n                          {/* save-button */}\r\n                          <div className=\"client-form-button-group\">\r\n                                    <button className=\"client-form-save-button\" onClick={handleSave}>Save</button>\r\n                          </div>  \r\n\r\n         \r\n\r\n        </div>\r\n\r\n        </div>\r\n\r\n        </div>\r\n                \r\n           \r\n                                                            \r\n      </div> \r\n  \r\n    );\r\n}\r\n  \r\n\r\nexport default InviteClient;\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\CSVUploader.js",["256","257","258","259","260"],[],"import React, { useRef, useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport axios from \"axios\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport Button from \"@mui/material/Button\";\r\nimport \"../../styles/InviteLink.css\";\r\n\r\nexport default function CSVUploader({ data, setData, setStudents }) {\r\n  const fileInput = useRef();\r\n  const [errorPairs, setErrorPairs] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  function handleButtonClick() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleFileUpload(event) {\r\n    const file = event.target.files[0];\r\n    if (!file) {\r\n      console.log(\"No file selected\");\r\n      return;\r\n    }\r\n\r\n    Papa.parse(file, {\r\n      header: true,\r\n      skipEmptyLines: true,\r\n      complete: function (results) {\r\n        console.log(\"Data:\", results.data);\r\n        console.log(\"Errors:\", results.errors);\r\n        console.log(\"Meta:\", results.meta);\r\n\r\n        const hasNameAndEmail =\r\n          \"name\" in results.data[0] && \"email\" in results.data[0];\r\n\r\n        if (!hasNameAndEmail) {\r\n          console.log(\"error in the csv file\");\r\n          console.log(results);\r\n          return;\r\n        }\r\n\r\n        processData(results.data);\r\n      },\r\n    });\r\n  }\r\n\r\n  function processData(data) {\r\n    const errorData = [];\r\n\r\n    for (const row of data) {\r\n      if (\r\n        !(\"name\" in row) ||\r\n        !(\"email\" in row) ||\r\n        Object.keys(row).length !== 2\r\n      ) {\r\n        errorData.push(row);\r\n      }\r\n    }\r\n\r\n    setErrorPairs(errorData);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  async function saveData() {\r\n    const failedData = [];\r\n    for (const row of errorPairs) {\r\n      try {\r\n        // Replace with your actual API request\r\n        const response = await axios.post(\"/api/course/student\", {\r\n          _id: data._id,\r\n          name: row.name,\r\n          email: row.email,\r\n          password: \"testing\",\r\n        });\r\n        setData(response.data);\r\n        setStudents(response.data.users);\r\n      } catch (error) {\r\n        failedData.push(row);\r\n      }\r\n    }\r\n\r\n    // Export the failed data as a CSV file\r\n    exportToCSV(failedData, \"failed_data.csv\");\r\n  }\r\n\r\n  function exportToCSV(data, filename) {\r\n    if (data) {\r\n      const csvData = Papa.unparse(data);\r\n      const blob = new Blob([csvData], { type: \"text/csv;charset=utf-8;\" });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n\r\n      link.href = url;\r\n      link.setAttribute(\"download\", filename);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"csv-form-save-button\" onClick={handleButtonClick}>\r\n        Add Multiple Students\r\n      </button>\r\n\r\n      {open && (\r\n        <div>\r\n          <div className=\"attachment-wrapper\">\r\n             <div className=\"attachment-wrapper-modal-content\">\r\n\r\n\r\n                    <div className='attachment-top'>\r\n                            \r\n                            {/* Title goes here */}\r\n                    \r\n                              <div className='attachment-title'> \r\n                                  <span class='attachment-title-01'>Add Multiple Students</span>\r\n                              </div>\r\n              \r\n\r\n                            {/* Close icon goes here */}\r\n                            <div className='attachment-close' onClick={handleClose}>\r\n                                <div className='attachment-close-button'> \r\n                                  <svg className='cSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\">\r\n                                      <path id=\"ic_close_24px\" d=\"M19,6.41,17.59,5,12,10.59,6.41,5,5,6.41,10.59,12,5,17.59,6.41,19,12,13.41,17.59,19,19,17.59,13.41,12Z\" transform=\"translate(-5 -5)\"/>\r\n                                  </svg>\r\n                                </div>\r\n                            </div>\r\n\r\n                    </div>\r\n\r\n                      <div className=\"attachment-container\">\r\n                        <div className=\"uploadFile\">\r\n                          <svg\r\n                            className=\"uploadSvg\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"155.48\"\r\n                            height=\"115.653\"\r\n                            viewBox=\"0 0 119.48 79.653\"\r\n                          >\r\n                            <path\r\n                              id=\"ic_cloud_upload_24px\"\r\n                              d=\"M96.331,34.069a37.3,37.3,0,0,0-69.7-9.957A29.858,29.858,0,0,0,29.87,83.653H94.588a24.82,24.82,0,0,0,1.742-49.584ZM69.7,48.8V68.718H49.783V48.8H34.848L59.74,23.913,84.632,48.8Z\"\r\n                              transform=\"translate(0 -4)\"\r\n                              fill=\"#2b6d95\"\r\n                              opacity=\"0.403\"\r\n                            />\r\n                          </svg>\r\n                        </div>\r\n\r\n                        <div className=\"uploadFile-instructions\">\r\n                          <span className=\"instructions-01\">Drag & drop a CSV file here</span>\r\n                          <span className=\"instructions-02\">\r\n                            (Make sure the file has two columns \"name\" & \"email\")\r\n                          </span>\r\n                        </div>\r\n\r\n                        <div className=\"file-input-wrapper\">\r\n                          <input\r\n                            type=\"file\"\r\n                            accept=\".csv\"\r\n                            ref={fileInput}\r\n                            style={{ display: \"none\" }}\r\n                            onChange={handleFileUpload}\r\n                          />\r\n                          <label htmlFor=\"upload-csv\">\r\n                            <button\r\n                              className=\"custom-file-button\"\r\n                              onClick={() => fileInput.current.click()}\r\n                            >\r\n                              Choose File\r\n                            </button>\r\n                          </label>\r\n                        </div>\r\n\r\n                      </div>\r\n                            {/* save-button */}\r\n                            <div className=\"attachment-button-group\">\r\n                                    <button className=\"attachment-save-button\" onClick={saveData}>Save</button>\r\n                      </div>  \r\n                </div>\r\n              </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* \r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle>Upload CSV File</DialogTitle>\r\n        <DialogContent>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".csv\"\r\n            ref={fileInput}\r\n            style={{ display: \"none\" }}\r\n            onChange={handleFileUpload}\r\n          />\r\n          <label htmlFor=\"upload-csv\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              onClick={() => fileInput.current.click()}\r\n            >\r\n              Choose File\r\n            </Button>\r\n          </label>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={saveData}>Save</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      */}\r\n      \r\n    </div>\r\n  );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\InviteStudents.js",["261","262","263","264"],[],"import {React, useState} from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport \"../../styles/InviteLink.css\";\r\nimport ErrorMessagePopup from './ErrorMessagePopup';\r\n\r\nexport default function InviteStudents({setData, data}) {\r\n    const navigate = useNavigate();\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [passwordFocused, setPasswordFocused] = useState(false);\r\n    const [passwordHasValue, setPasswordHasValue] = useState(false);\r\n\r\n    const [resourcesFocused, setResourcesFocused] = useState(false);\r\n    const [resourcesHasValue, setResourcesHasValue] = useState(false);\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [hasValue, setHasValue] = useState(false);\r\n\r\n\r\n    const handleFocus = () => {\r\n        setIsFocused(true);\r\n    };\r\n\r\n    const handleBlur = (e) => {\r\n        setIsFocused(false);\r\n        setHasValue(e.target.value !== '');\r\n    };\r\n  \r\n  \r\n    const handleNameChange = (event) => {\r\n      setName(event.target.value);\r\n    }\r\n  \r\n    const handleEmailChange = (event) => {\r\n      setEmail(event.target.value);\r\n    }\r\n  \r\n    const handleSave = async() => {\r\n      // do something with the name and email data, e.g. submit to server\r\n      console.log('Name:', name);\r\n      console.log('Email:', email);\r\n\r\n      if (name && email) {\r\n        try {\r\n          const response = await axios.post( \"/api/course/student\" , \r\n            {_id:data._id, \"name\": name, \"email\": email, password: \"testing\"}, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          }); \r\n            console.log(\"user created successfully\");\r\n            setData(response.data);\r\n            setOpen(false);\r\n        } catch (err) {\r\n          switch (err.response.status) {\r\n            case (401):\r\n                navigate(\"/signin\", {replace: true});\r\n                break;\r\n            case (400):\r\n                <ErrorMessagePopup message={\"Missing fields while adding students\"} />;\r\n                setOpen(false);\r\n                break;\r\n            case (409):\r\n                <ErrorMessagePopup message={\"Student already added to course\"} />;\r\n                setOpen(false);\r\n                break;\r\n            case (404):\r\n                <ErrorMessagePopup message={\"Course doesnt exist\"} />;\r\n                setOpen(false);\r\n                break;\r\n            default:\r\n                navigate(\"/signin\" , {replace: true});\r\n                break;\r\n          }\r\n        }\r\n    }}\r\n\r\n    const handleOpenModal = () => {\r\n      setOpen(true);\r\n    }\r\n  \r\n    return (\r\n      <div>\r\n\r\n        <button className=\"open-button\" onClick={handleOpenModal}>Add a Student</button>\r\n\r\n       \r\n\r\n                <div className=\"student-form-modal\" style={{ display: open ? 'block' : 'none', position: 'absolute', zIndex: '999' }}>\r\n                     \r\n                     <div className='student-form-modal-wrapper'>    \r\n\r\n                            <div className=\"student-form-modal-content\">\r\n\r\n                                <div className='student-form-top'>\r\n\r\n                                    <div className='student-form-title'>\r\n                                        <span>Add a Student</span>\r\n                                    </div>\r\n\r\n                                    {/* Close icon goes here */}\r\n                                    <div className='student-form-close-wrapper'>\r\n                                                        <div className='student-form-close' onClick={() => setOpen(false)}>\r\n                                                            <div className='student-form-close-button'> \r\n                                                            <svg className='cSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\" viewBox=\"0 0 14 14\">\r\n                                                                <path id=\"ic_close_24px\" d=\"M19,6.41,17.59,5,12,10.59,6.41,5,5,6.41,10.59,12,5,17.59,6.41,19,12,13.41,17.59,19,19,17.59,13.41,12Z\" transform=\"translate(-5 -5)\"/>\r\n                                                            </svg>\r\n                                                            </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                \r\n                            </div>\r\n                                \r\n                                \r\n                                <div className=\"student-form-input-name\">\r\n                                    <label className={`student-form-input-name-label ${passwordFocused  || passwordHasValue ? 'focused' : ''}`}> Student Full Name</label>\r\n                                    <input className=\"student-form-input-name-input\"\r\n                                          onFocus={() => setPasswordFocused(true)}\r\n                                          onBlur={(e) => {\r\n                                                              setPasswordFocused(false);\r\n                                                              setPasswordHasValue(e.target.value !== '');\r\n                                                          }}\r\n                                            type=\"text\"\r\n                                            id=\"name\" required value={name} onChange={handleNameChange} />\r\n                                </div>\r\n\r\n                                <div className=\"student-form-input-email\">\r\n                                    <label className={`student-form-input-email-label ${resourcesFocused  || resourcesHasValue ? 'focused' : ''}`} >Student Email ID</label>\r\n                                    <input className=\"student-form-input-email-input\"\r\n                                            onFocus={() => setResourcesFocused(true)}\r\n                                            onBlur={(e) => {\r\n                                                              setResourcesFocused(false);\r\n                                                              setResourcesHasValue(e.target.value !== '');\r\n                                                          }}\r\n                                            type=\"email\" id=\"email\" value={email} required onChange={handleEmailChange} />\r\n                                </div>\r\n\r\n                                <div className=\"student-form-button-group\">\r\n                                    <button className=\"student-form-save-button\" onClick={handleSave}>Save</button>\r\n                                </div>\r\n        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n      </div> \r\n    );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\stages\\StageOne.js",["265"],[],"import React, { useState } from \"react\";\r\nimport \"../../../styles/StageOne.css\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function StageOne({ data, setData }) {\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = useState(false);\r\n  const [maxPreferences, setMaxPreferences] = useState(\"\");\r\n  const [numStudentsPerProject, setNumStudentsPerProject] = useState(\"\");\r\n  const [deadline, setDeadline] = useState(\"\");\r\n\r\n\r\n    const [subjectIDFocused, setSubjectIDFocused] = useState(false);\r\n    const [subjectIDHasValue, setSubjectIDHasValue] = useState(false);\r\n\r\n    const [studentIDFocused, setStudentIDFocused] = useState(false);\r\n    const [studentIDHasValue, setstudentIDHasValue] = useState(false);\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [hasValue, setHasValue] = useState(false);\r\n\r\n\r\n    const handleFocus = () => {\r\n        setIsFocused(true);\r\n    };\r\n\r\n    const handleBlur = (e) => {\r\n        setIsFocused(false);\r\n        setHasValue(e.target.value !== '');\r\n    };\r\n\r\n  const handleSubmit = async () => {\r\n    // Save data and close the form\r\n    if (!data.projects) {\r\n      console.log(\"Please add projects into the course\");\r\n      return;\r\n    }\r\n\r\n    if (maxPreferences && numStudentsPerProject && deadline) {\r\n      try {\r\n        const response = await axios.post(\r\n          \"/api/courses/assign\",\r\n          {\r\n            name: data.name,\r\n            maxPreferences: maxPreferences,\r\n            maxStudentsPerProject: numStudentsPerProject,\r\n            preferencesDeadline: deadline,\r\n          },\r\n          { headers: { \"Content-Type\": \"application/json\" } }\r\n        );\r\n        setData(response.data);\r\n        handleClose();\r\n      } catch (err) {\r\n        switch (err.response.status) {\r\n          case 401:\r\n            navigate(\"/signin\", { replace: true });\r\n            handleClose();\r\n            break;\r\n          case 400:\r\n            console.log(\"course couldnt be found\");\r\n            break;\r\n          case 500:\r\n            console.log(\"internal error\");\r\n            break;\r\n        }\r\n      }\r\n    } else {\r\n      console.log(\"missing course details\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    // Reset form data and close the form\r\n    setMaxPreferences(\"\");\r\n    setNumStudentsPerProject(\"\");\r\n    setDeadline(\"\");\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setOpen(true)}>Open Form</button>\r\n\r\n\r\n\r\n      {open && (\r\n\r\n\r\n\r\n          <div className=\"form-popup-wrapper\"> \r\n\r\n\r\n            <div className=\"form-container\">\r\n\r\n\r\n              <div className='ep-top'>\r\n                                \r\n                                {/* Title goes here */}\r\n                        \r\n                                  <div className='ep-title'> \r\n                                      <span class='ep-title-01'>Enable Preferences</span>\r\n                                  </div>\r\n                  \r\n\r\n                                {/* Close icon goes here */}\r\n                                <div className=\"ep-close-wrapper\">\r\n                                \r\n                                    <div className='ep-close' onClick={handleClose}>\r\n                                        <div className='ep-close-button'> \r\n                                          <svg className='cSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\">\r\n                                              <path id=\"ic_close_24px\" d=\"M19,6.41,17.59,5,12,10.59,6.41,5,5,6.41,10.59,12,5,17.59,6.41,19,12,13.41,17.59,19,19,17.59,13.41,12Z\" transform=\"translate(-5 -5)\"/>\r\n                                          </svg>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n              </div>\r\n\r\n\r\n              <div className='ep-proj'> \r\n\r\n                <label htmlFor=\"maxPreferences\" className={`ep-proj-label ${subjectIDFocused  || subjectIDHasValue ? 'focused' : ''}`}>Max Preferences for a Student</label>\r\n                <input\r\n                  className=\"ep-proj-input\"\r\n                  type=\"text\"\r\n                  id=\"maxPreferences\"\r\n                  value={maxPreferences}\r\n                  onChange={(e) => setMaxPreferences(e.target.value)}\r\n                  required\r\n                  onFocus={() => setSubjectIDFocused(true)}\r\n                  onBlur={(e) => {\r\n                                    setSubjectIDFocused(false);\r\n                                    setSubjectIDHasValue(e.target.value !== '');\r\n                                  }}\r\n                />\r\n\r\n            </div>\r\n\r\n\r\n\r\n              {/*<label htmlFor=\"maxPreferences\">\r\n                Max Preferences for a Student:\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"maxPreferences\"\r\n                  value={maxPreferences}\r\n                  onChange={(e) => setMaxPreferences(e.target.value)}\r\n                />\r\n                                </label>*/}\r\n\r\n\r\n\r\n              <div className='ep-stud'> \r\n\r\n                  <label htmlFor=\"numStudentsPerProject\" className={`ep-stud-label ${studentIDFocused || studentIDHasValue ? 'focused' : ''}`}>Maximum Number of Students per Project</label>\r\n                  <input\r\n                    className=\"ep-stud-input\"\r\n                    type=\"text\"\r\n                    id=\"numStudentsPerProject\"\r\n                    value={numStudentsPerProject}\r\n                    onChange={(e) => setNumStudentsPerProject(e.target.value)}\r\n                    required\r\n                    onFocus={() => setStudentIDFocused(true)}\r\n                    onBlur={(e) => {\r\n                                      setSubjectIDFocused(false);\r\n                                      setstudentIDHasValue(e.target.value !== '');\r\n                                    }}\r\n                  />\r\n\r\n              </div>\r\n\r\n\r\n\r\n\r\n\r\n              {/*<label htmlFor=\"numStudentsPerProject\">\r\n                Maximum Number of Students per Project:\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"numStudentsPerProject\"\r\n                  value={numStudentsPerProject}\r\n                  onChange={(e) => setNumStudentsPerProject(e.target.value)}\r\n                />\r\n                                  </label>*/}\r\n\r\n\r\n              <div className='ep-deadline'> \r\n\r\n              <label htmlFor=\"deadline\" className={`ep-deadline-label ${isFocused || hasValue ? 'focused' : ''}`}>Expected Preferences Deadline</label>\r\n              <input\r\n                type=\"date\"\r\n                id=\"deadline\"\r\n                value={deadline}\r\n                onChange={(e) => setDeadline(e.target.value)}\r\n                required\r\n                className={`ep-deadline-input ${isFocused || hasValue ? 'focused' : ''}`}\r\n                onFocus={handleFocus}\r\n                onBlur={handleBlur}\r\n              />\r\n\r\n            </div>\r\n\r\n\r\n              {/*<label htmlFor=\"deadline\">\r\n                Deadline:\r\n                <input\r\n                  type=\"date\"\r\n                  id=\"deadline\"\r\n                  value={deadline}\r\n                  onChange={(e) => setDeadline(e.target.value)}\r\n                />\r\n              </label>*/}\r\n\r\n                  <div className=\"ep-buttons\">\r\n                    <button className=\"ep-submit-button\" onClick={handleSubmit}>Save</button>\r\n                  </div>\r\n\r\n            \r\n                 </div>\r\n            </div>\r\n\r\n      )}\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\stages\\StageTwo.js",["266"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport \"../../../styles/StageOne.css\";\r\n\r\nimport \"../../../styles/preference-form.css\";\r\n\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  Paper,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport SearchOutlinedIcon from \"@mui/icons-material/SearchOutlined\";\r\nimport Box from \"@mui/material/Box\";\r\nimport InputBase from \"@mui/material/InputBase\";\r\nimport AutoAssignForm from \"components/forms/AutoAssignForm\";\r\n\r\n\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n  position: \"relative\",\r\n  border: \"1.5px solid #9F9F9F\",\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  \"&:hover\": {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  width: \"100%\",\r\n  marginRight: \"1rem\",\r\n  marginLeft: 0,\r\n  boxShadow: \"none\",\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    width: \"40ch\",\r\n    marginLeft: theme.spacing(1),\r\n    \"&:focus\": {\r\n      width: \"30ch\", // Increase the focused width here\r\n    },\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: \"100%\",\r\n  position: \"absolute\",\r\n  pointerEvents: \"none\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  boxShadow: \"none\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: \"inherit\",\r\n  \"& .MuiInputBase-input\": {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    boxShadow: \"none\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"40ch\",\r\n      \"&:focus\": {\r\n        width: \"20ch\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledPaper = styled(Paper)(({ theme }) => ({\r\n  marginLeft: theme.spacing(7),\r\n  background: \"whitesmoke\",\r\n  borderRadius: \"10px\",\r\n  marginRight: theme.spacing(7),\r\n  marginTop: theme.spacing(7),\r\n  marginBottom: theme.spacing(7),\r\n}));\r\n\r\nconst HeaderTableCell = styled(TableCell)(({ theme }) => ({\r\n  backgroundColor: \"#0097EB\",\r\n  fontSize: \"16px\",\r\n  fontFamily: \"Poppins\",\r\n  color: theme.palette.common.white,\r\n  whiteSpace: \"normal\",\r\n  overflow: \"hidden\",\r\n  textOverflow: \"ellipsis\",\r\n}));\r\n\r\nconst HoverTableRow = styled(TableRow)(({ theme }) => ({\r\n  \"&:hover\": {\r\n    backgroundColor: alpha(theme.palette.primary.main, 0.1),\r\n    cursor: \"pointer\",\r\n  },\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  fontSize: \"14.5px\",\r\n  fontFamily: \"Poppins\",\r\n  whiteSpace: \"normal\",\r\n  overflow: \"hidden\",\r\n  textOverflow: \"ellipsis\",\r\n  maxWidth: \"1px\",\r\n}));\r\n\r\nexport default function StageTwo({ data, setData }) {\r\n  const navigate = useNavigate();\r\n  const assignedProjects = data.assignedProject;\r\n  const students = data.users;\r\n\r\n  const [selectedStudent, setSelectedStudent] = React.useState(null);\r\n  const [preferences, setPreferences] = React.useState([]);\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchName, setSearchName] = useState(\"\");\r\n  const [filteredStudents, setFilteredStudents] = useState([]);\r\n\r\n  React.useEffect(() => {\r\n    async function getPreferences() {\r\n      try {\r\n        const response = await axios.get(`/api/preference/${data._id}`);\r\n        setPreferences(response.data);\r\n      } catch (err) {\r\n        console.log({ err });\r\n      }\r\n    }\r\n    getPreferences();\r\n  }, [data]);\r\n\r\n  // pagination and search related features\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSearchNameChange = (event) => {\r\n    setSearchName(event.target.value);\r\n    if (searchName) {\r\n      const filtered = students.filter((student) =>\r\n        student.name.includes(searchName)\r\n      );\r\n      setFilteredStudents(filtered);\r\n    } else {\r\n      setFilteredStudents(students);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (searchName) {\r\n      const filtered = students.filter((student) => student.name.includes(searchName));\r\n      setFilteredStudents(filtered);\r\n    } else {\r\n      setFilteredStudents(students);\r\n    }\r\n  }, [students, searchName]);\r\n\r\n  //\r\n\r\n  const assignedProjectToStudent = (userId) => {\r\n    if (!Array.isArray(assignedProjects)) {\r\n      return \"-\";\r\n    }\r\n    const assignedProject = assignedProjects.find(\r\n      (ap) => ap.student.toString() === userId.toString()\r\n    );\r\n    return assignedProject ? assignedProject.project.name : \"-\";\r\n  };\r\n\r\n  const isPreferenceSet = (userId) => {\r\n    if (!Array.isArray(preferences)) {\r\n      return \"NO\";\r\n    }\r\n    const studentPreferences = preferences.find(\r\n      (preference) => preference.student._id === userId\r\n    );\r\n    if (\r\n      studentPreferences &&\r\n      studentPreferences.projectPreferences.length > 0\r\n    ) {\r\n      return \"Yes\";\r\n    }\r\n    return \"No\";\r\n  };\r\n\r\n  const isAssignButtonEnabled = (userId) => {\r\n    if (!Array.isArray(preferences)) {\r\n      return false;\r\n    }\r\n\r\n    const studentPreferences = preferences.find(\r\n      (preference) => preference.student._id === userId\r\n    );\r\n    if (\r\n      studentPreferences &&\r\n      studentPreferences.projectPreferences.length > 0\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const renderPopup = () => {\r\n    if (!preferences) {\r\n      return <div></div>;\r\n    }\r\n    const selectedStudentPreferences = preferences.find(\r\n      (preference) => preference.student._id === selectedStudent\r\n    )?.projectPreferences;\r\n    return (\r\n\r\n       // Assign Project Individually\r\n\r\n      <div className=\"form-popup-wrapper-pro\">\r\n        <div className=\"form-container-pro\">\r\n\r\n        <div className='ep-top'>\r\n                                \r\n                                {/* Title goes here */}\r\n                        \r\n                                  <div className='ep-title'> \r\n                                      <span class='ep-title-01'>Assign Project to{\" \"}\r\n                                            {students.find((student) => student._id === selectedStudent)?.name}\r\n                                      </span>\r\n                                  </div>\r\n                  \r\n\r\n                                {/* Close icon goes here */}\r\n                                <div className=\"ep-close-wrapper\">\r\n                                \r\n                                    <div className='ep-close' onClick={handleClose}>\r\n                                        <div className='ep-close-button'> \r\n                                          <svg className='cSvg' xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\">\r\n                                              <path id=\"ic_close_24px\" d=\"M19,6.41,17.59,5,12,10.59,6.41,5,5,6.41,10.59,12,5,17.59,6.41,19,12,13.41,17.59,19,19,17.59,13.41,12Z\" transform=\"translate(-5 -5)\"/>\r\n                                          </svg>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n              </div>\r\n\r\n    \r\n\r\n\r\n          {selectedStudentPreferences &&\r\n            selectedStudentPreferences.map((preference) => (\r\n              <div className=\"ep-top-01\" key={preference.project._id}>\r\n                <p>Preference: {preference.rank}</p>\r\n                <p>{preference.project.name}</p>\r\n              </div>\r\n            ))}\r\n\r\n          <div className=\"preference-field-pro\">\r\n            <select name=\"project\" id=\"project-select\">\r\n              {data.projects.map((project) => (\r\n                <option  className=\"option\" key={project._id} value={project._id}>\r\n                  {project.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n\r\n            <div className=\"ep-buttons-pro\">\r\n                <button className=\"ep-submit-button-pro\"\r\n                  onClick={() =>\r\n                    handleSavePopup(document.getElementById(\"project-select\").value)\r\n                  }\r\n                >\r\n                  Save\r\n                </button>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleClick = (studentId) => {\r\n    setSelectedStudent(studentId);\r\n  };\r\n\r\n  const handleSavePopup = (projectId) => {\r\n    // Do something with the selected project and studentId\r\n    console.log(projectId, selectedStudent);\r\n    setSelectedStudent(null);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setSelectedStudent(null);\r\n  };\r\n\r\n  const isAutoAssignEnabled = () => {\r\n    for (let i = 0; i < students.length; i++) {\r\n      const student = students[i];\r\n      const studentPreferences = preferences.find(\r\n        (preference) => preference.student._id === student._id\r\n      );\r\n      if (\r\n        !studentPreferences ||\r\n        studentPreferences.projectPreferences.length === 0\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  \r\n\r\n  return (\r\n    <div>\r\n\r\n      {selectedStudent && renderPopup()}   \r\n      <StyledPaper>\r\n        <Toolbar sx={{ height: \"100px\" }}>\r\n\r\n            {/*    title of the table   */}\r\n\r\n          <Typography\r\n            variant=\"h5\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{\r\n              flexGrow: 1,\r\n              display: { xs: \"none\", sm: \"block\" },\r\n              color: \"#0097EB\",\r\n              fontFamily: \"Poppins\",\r\n            }}\r\n          >\r\n            Assign Projects\r\n          </Typography>\r\n\r\n            {/*    search button   */}\r\n\r\n          <Search>\r\n            <SearchIconWrapper>\r\n              <SearchOutlinedIcon sx={{ color: \"#9F9F9F\" }} />\r\n            </SearchIconWrapper>\r\n            <StyledInputBase\r\n              placeholder=\"Search by Student Name\"\r\n              inputProps={{ Poppins: \"search\" }}\r\n              value={searchName}\r\n              onChange={handleSearchNameChange}\r\n            />\r\n          </Search>\r\n\r\n          {/*    action buttons goes here   */}\r\n            <AutoAssignForm data={data} setData={setData} enabled={isAutoAssignEnabled}/>\r\n\r\n          <Box sx={{ ml: 1.5 }}></Box>\r\n        </Toolbar>\r\n        <TableContainer>\r\n          <Table sx={{ width: \"100%\" }}>\r\n            <TableHead>\r\n              <TableRow sx={{ height: \"30px\" }}>\r\n                <HeaderTableCell sx={{ width: \"5%\", paddingLeft: \"25px\" }}>\r\n                  S.No\r\n                </HeaderTableCell>\r\n                <HeaderTableCell sx={{ width: \"25%\" }}>\r\n                  Student Name\r\n                </HeaderTableCell>\r\n                <HeaderTableCell sx={{ width: \"25%\" }}>\r\n                  Email\r\n                </HeaderTableCell>\r\n                <HeaderTableCell sx={{ width: \"10%\"}}>\r\n                  Preferences Set\r\n                </HeaderTableCell>\r\n                <HeaderTableCell sx={{ width: \"30%\", paddingRight: \"42px\" }}>\r\n                  Assigned Project\r\n                </HeaderTableCell>\r\n                <HeaderTableCell sx={{ width: \"5%\", paddingRight: \"42px\" }}>\r\n                  Actions\r\n                </HeaderTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredStudents\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <HoverTableRow key={row._id}>\r\n                      <StyledTableCell\r\n                        sx={{ width: \"5%\", paddingLeft: \"25px\" }}\r\n                      >\r\n                        {index + 1 + page * rowsPerPage}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell sx={{ width: \"25%\" }}>\r\n                        {row.name}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell sx={{ width: \"25%\" }}>\r\n                        {row.email}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell sx={{ width: \"10%\" }}>\r\n                        {isPreferenceSet(row._id)}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell sx={{ width: \"30%\" }}>\r\n                        {assignedProjectToStudent(row._id)}\r\n                      </StyledTableCell> \r\n                      <StyledTableCell\r\n                        sx={{ width: \"5%\", paddingRight: \"42px\" }}\r\n                        align=\"center\"\r\n                      >\r\n                        <button\r\n                          onClick={() => handleClick(row._id)}\r\n                          disabled={!isAssignButtonEnabled(row._id)}\r\n                        >\r\n                        Assign\r\n                        </button>\r\n                      </StyledTableCell>\r\n                    </HoverTableRow>\r\n                  )\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          sx={{ marginRight: \"1.5rem\" }}\r\n          component=\"div\"\r\n          count={students.length}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          rowsPerPage={rowsPerPage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </StyledPaper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\courses\\stages\\StageThree.js",["267","268","269","270","271","272","273","274","275","276","277"],[],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\r\n\r\nimport {\r\n    TablePagination, \r\n    Paper, \r\n    Toolbar, \r\n    Typography, \r\n    IconButton, \r\n  } from '@mui/material';\r\n  import { styled, alpha } from '@mui/material/styles';\r\n  import InputBase from '@mui/material/InputBase';\r\n  \r\n  \r\n  const Search = styled('div')(({ theme }) => ({\r\n    position: 'relative',\r\n    border: \"1.5px solid #9F9F9F\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    width: \"100%\",\r\n    marginRight:\"1rem\",\r\n    marginLeft: 0,\r\n    boxShadow: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '40ch',\r\n      marginLeft: theme.spacing(1),\r\n      '&:focus': {\r\n        width: '30ch', // Increase the focused width here\r\n      },\r\n    },\r\n  }));\r\n  \r\n  const SearchIconWrapper = styled('div')(({ theme }) => ({\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    boxShadow: \"none\",\r\n  }));\r\n  \r\n  const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n    color: 'inherit',\r\n    '& .MuiInputBase-input': {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n      transition: theme.transitions.create('width'),\r\n      width: \"100%\",\r\n      height: '100%',\r\n      boxShadow: 'none',\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: '40ch',\r\n        '&:focus': {\r\n          width: '20ch',\r\n        },\r\n      },\r\n    },\r\n  }));\r\n  \r\n  const StyledPaper = styled(Paper)(({ theme }) => ({\r\n    marginLeft: theme.spacing(7),\r\n    background: \"whitesmoke\" ,\r\n    borderRadius: \"10px\",\r\n    marginRight : theme.spacing(7),\r\n    marginTop: theme.spacing(7),\r\n    marginBottom: theme.spacing(7),\r\n  }));\r\n  \r\n  const HeaderTableCell = styled(TableCell)(({ theme }) => ({\r\n    backgroundColor: \"#0097EB\" ,\r\n    fontSize: \"16px\",\r\n    fontFamily : \"Poppins\",\r\n    color: theme.palette.common.white,\r\n    whiteSpace: \"normal\",\r\n    overflow: \"hidden\",\r\n    textOverflow: \"ellipsis\"\r\n  }));\r\n  \r\n  const HoverTableRow = styled(TableRow)(({ theme }) => ({\r\n    '&:hover': {\r\n      backgroundColor: alpha(theme.palette.primary.main, 0.1),\r\n      cursor: 'pointer',\r\n    },\r\n  }));\r\n  \r\n  const StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    fontSize: \"14.5px\",\r\n    fontFamily: \"Poppins\",\r\n    whiteSpace: \"normal\",\r\n    overflow: \"hidden\",\r\n    textOverflow: \"ellipsis\",\r\n    maxWidth: \"1px\"\r\n  }));\r\n\r\n\r\nexport default function StageThree({ data }) {\r\n    console.log(data);\r\n  const projects = data.projects;\r\n  const students = data.users;\r\n  const assignedProjects = data.assignedProject;\r\n\r\n  function getProjectName(projectID) {\r\n    const project = projects.find((proj) => proj._id === projectID);\r\n    return project ? project.name : '';\r\n  }\r\n  \r\n  function getStudentName(studentID) {\r\n    const student = students.find((user) => user._id === studentID);\r\n    return student ? student.email : '';\r\n  }\r\n\r\n\r\n  function getProjects(projectID) {\r\n    const filtered = assignedProjects.filter((project) => project.project === projectID);\r\n    return filtered.map((assignment, index) => (\r\n      <TableRow sx={{height:\"30px\"}} key={index}>\r\n        {index === 0 && (\r\n          <StyledTableCell sx={{width:\"50%\", paddingLeft:\"25px\"}}  rowSpan={filtered.length}>{getProjectName(projectID)}</StyledTableCell>\r\n        )}\r\n        <StyledTableCell sx={{width:\"40%\"}} >{getStudentName(assignment.student)}</StyledTableCell>\r\n      </TableRow>\r\n    ));\r\n  }\r\n\r\n    const [selectedStudent , setSelectedStudent] = React.useState(\"\");\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [searchName, setSearchName] = useState(\"\");\r\n    const [filteredStudents, setFilteredStudents] = useState([]);\r\n\r\n\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n      setPage(newPage);\r\n    };\r\n  \r\n    const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10));\r\n      setPage(0);\r\n    };\r\n  \r\n\r\n  return (\r\n    \r\n<StyledPaper>\r\n<Toolbar sx={{height:\"100px\"}}>\r\n         \r\n         <Typography\r\n           variant=\"h5\"\r\n           noWrap\r\n           component=\"div\"\r\n           sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } , color: \"#0097EB\", fontFamily:\"Poppins\" }}\r\n         >\r\n           Assigned Projects\r\n         </Typography>\r\n</Toolbar>\r\n\r\n<TableContainer >\r\n  <Table sx={{ width: '100%' }}>\r\n    <TableHead>\r\n      <TableRow sx={{height:\"30px\" }}>\r\n        <HeaderTableCell sx={{width:\"50%\", paddingLeft:\"25px\"}} >Project Name</HeaderTableCell>\r\n        <HeaderTableCell sx={{width:\"40%\"}} >Student Email</HeaderTableCell>\r\n      </TableRow>\r\n    </TableHead>\r\n    <TableBody>\r\n          {projects.map((project) => getProjects(project._id))}\r\n    </TableBody>\r\n  </Table>\r\n</TableContainer>\r\n<TablePagination\r\n  sx = {{marginRight:\"1.5rem\"}}\r\n  component=\"div\"\r\n  count={students.length}\r\n  page={page}\r\n  onPageChange={handleChangePage}\r\n  rowsPerPage={rowsPerPage}\r\n  onRowsPerPageChange={handleChangeRowsPerPage} />\r\n</StyledPaper>\r\n\r\n  );\r\n}\r\n","D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\AutoAssignForm.js",[],[],"D:\\CS682_Project\\Capstone-Project-Management-System\\client_side\\src\\components\\forms\\ErrorMessagePopup.js",[],[],{"ruleId":"278","severity":1,"message":"279","line":13,"column":8,"nodeType":"280","messageId":"281","endLine":13,"endColumn":22},{"ruleId":"278","severity":1,"message":"282","line":40,"column":13,"nodeType":"280","messageId":"281","endLine":40,"endColumn":17},{"ruleId":"278","severity":1,"message":"283","line":2,"column":10,"nodeType":"280","messageId":"281","endLine":2,"endColumn":14},{"ruleId":"284","severity":1,"message":"285","line":21,"column":5,"nodeType":"286","endLine":21,"endColumn":7,"suggestions":"287"},{"ruleId":"284","severity":1,"message":"288","line":57,"column":6,"nodeType":"286","endLine":57,"endColumn":18,"suggestions":"289"},{"ruleId":"284","severity":1,"message":"290","line":43,"column":6,"nodeType":"286","endLine":43,"endColumn":8,"suggestions":"291"},{"ruleId":"278","severity":1,"message":"292","line":17,"column":3,"nodeType":"280","messageId":"281","endLine":17,"endColumn":13},{"ruleId":"293","severity":1,"message":"294","line":56,"column":39,"nodeType":"295","endLine":56,"endColumn":66},{"ruleId":"296","severity":1,"message":"297","line":34,"column":13,"nodeType":"298","messageId":"299","endLine":48,"endColumn":18},{"ruleId":"278","severity":1,"message":"300","line":131,"column":9,"nodeType":"280","messageId":"281","endLine":131,"endColumn":17},{"ruleId":"278","severity":1,"message":"301","line":133,"column":10,"nodeType":"280","messageId":"281","endLine":133,"endColumn":15},{"ruleId":"278","severity":1,"message":"302","line":133,"column":17,"nodeType":"280","messageId":"281","endLine":133,"endColumn":25},{"ruleId":"284","severity":1,"message":"303","line":163,"column":8,"nodeType":"286","endLine":163,"endColumn":38,"suggestions":"304"},{"ruleId":"278","severity":1,"message":"292","line":22,"column":3,"nodeType":"280","messageId":"281","endLine":22,"endColumn":13},{"ruleId":"278","severity":1,"message":"305","line":116,"column":7,"nodeType":"280","messageId":"281","endLine":116,"endColumn":14},{"ruleId":"278","severity":1,"message":"282","line":146,"column":9,"nodeType":"280","messageId":"281","endLine":146,"endColumn":13},{"ruleId":"284","severity":1,"message":"306","line":151,"column":6,"nodeType":"286","endLine":151,"endColumn":8,"suggestions":"307"},{"ruleId":"296","severity":1,"message":"297","line":186,"column":7,"nodeType":"298","messageId":"299","endLine":205,"endColumn":8},{"ruleId":"296","severity":1,"message":"297","line":217,"column":7,"nodeType":"298","messageId":"299","endLine":236,"endColumn":8},{"ruleId":"284","severity":1,"message":"308","line":172,"column":8,"nodeType":"286","endLine":172,"endColumn":38,"suggestions":"309"},{"ruleId":"296","severity":1,"message":"297","line":190,"column":7,"nodeType":"298","messageId":"299","endLine":209,"endColumn":8},{"ruleId":"278","severity":1,"message":"310","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":25},{"ruleId":"278","severity":1,"message":"311","line":18,"column":12,"nodeType":"280","messageId":"281","endLine":18,"endColumn":21},{"ruleId":"278","severity":1,"message":"312","line":19,"column":12,"nodeType":"280","messageId":"281","endLine":19,"endColumn":20},{"ruleId":"278","severity":1,"message":"313","line":22,"column":11,"nodeType":"280","messageId":"281","endLine":22,"endColumn":22},{"ruleId":"278","severity":1,"message":"314","line":26,"column":11,"nodeType":"280","messageId":"281","endLine":26,"endColumn":21},{"ruleId":"278","severity":1,"message":"315","line":35,"column":12,"nodeType":"280","messageId":"281","endLine":35,"endColumn":24},{"ruleId":"278","severity":1,"message":"316","line":37,"column":14,"nodeType":"280","messageId":"281","endLine":37,"endColumn":30},{"ruleId":"278","severity":1,"message":"317","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":25},{"ruleId":"278","severity":1,"message":"311","line":18,"column":12,"nodeType":"280","messageId":"281","endLine":18,"endColumn":21},{"ruleId":"278","severity":1,"message":"312","line":19,"column":12,"nodeType":"280","messageId":"281","endLine":19,"endColumn":20},{"ruleId":"278","severity":1,"message":"313","line":22,"column":11,"nodeType":"280","messageId":"281","endLine":22,"endColumn":22},{"ruleId":"278","severity":1,"message":"314","line":26,"column":11,"nodeType":"280","messageId":"281","endLine":26,"endColumn":21},{"ruleId":"278","severity":1,"message":"318","line":4,"column":8,"nodeType":"280","messageId":"281","endLine":4,"endColumn":14},{"ruleId":"278","severity":1,"message":"319","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":19},{"ruleId":"278","severity":1,"message":"320","line":6,"column":8,"nodeType":"280","messageId":"281","endLine":6,"endColumn":21},{"ruleId":"278","severity":1,"message":"321","line":7,"column":8,"nodeType":"280","messageId":"281","endLine":7,"endColumn":21},{"ruleId":"278","severity":1,"message":"322","line":8,"column":8,"nodeType":"280","messageId":"281","endLine":8,"endColumn":14},{"ruleId":"278","severity":1,"message":"311","line":19,"column":12,"nodeType":"280","messageId":"281","endLine":19,"endColumn":21},{"ruleId":"278","severity":1,"message":"312","line":20,"column":12,"nodeType":"280","messageId":"281","endLine":20,"endColumn":20},{"ruleId":"278","severity":1,"message":"313","line":23,"column":11,"nodeType":"280","messageId":"281","endLine":23,"endColumn":22},{"ruleId":"278","severity":1,"message":"314","line":27,"column":11,"nodeType":"280","messageId":"281","endLine":27,"endColumn":21},{"ruleId":"296","severity":1,"message":"297","line":55,"column":9,"nodeType":"298","messageId":"299","endLine":66,"endColumn":10},{"ruleId":"278","severity":1,"message":"300","line":115,"column":9,"nodeType":"280","messageId":"281","endLine":115,"endColumn":17},{"ruleId":"278","severity":1,"message":"292","line":10,"column":5,"nodeType":"280","messageId":"281","endLine":10,"endColumn":15},{"ruleId":"278","severity":1,"message":"323","line":16,"column":9,"nodeType":"280","messageId":"281","endLine":16,"endColumn":15},{"ruleId":"278","severity":1,"message":"324","line":37,"column":9,"nodeType":"280","messageId":"281","endLine":37,"endColumn":26},{"ruleId":"278","severity":1,"message":"325","line":48,"column":9,"nodeType":"280","messageId":"281","endLine":48,"endColumn":24},{"ruleId":"278","severity":1,"message":"326","line":86,"column":9,"nodeType":"280","messageId":"281","endLine":86,"endColumn":22},{"ruleId":"278","severity":1,"message":"327","line":132,"column":12,"nodeType":"280","messageId":"281","endLine":132,"endColumn":27},{"ruleId":"278","severity":1,"message":"328","line":132,"column":30,"nodeType":"280","messageId":"281","endLine":132,"endColumn":48},{"ruleId":"278","severity":1,"message":"329","line":135,"column":12,"nodeType":"280","messageId":"281","endLine":135,"endColumn":22},{"ruleId":"278","severity":1,"message":"330","line":135,"column":24,"nodeType":"280","messageId":"281","endLine":135,"endColumn":37},{"ruleId":"278","severity":1,"message":"331","line":136,"column":12,"nodeType":"280","messageId":"281","endLine":136,"endColumn":28},{"ruleId":"278","severity":1,"message":"332","line":136,"column":30,"nodeType":"280","messageId":"281","endLine":136,"endColumn":49},"no-unused-vars","'PreferenceForm' is defined but never used.","Identifier","unusedVar","'role' is assigned a value but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'navigate' and 'role'. Either include them or remove the dependency array.","ArrayExpression",["333"],"React Hook useEffect has missing dependencies: 'checkSignedIn' and 'navigate'. Either include them or remove the dependency array.",["334"],"React Hook React.useEffect has a missing dependency: 'isAdmin'. Either include it or remove the dependency array.",["335"],"'IconButton' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'navigate' is assigned a value but never used.","'popup' is assigned a value but never used.","'setPopup' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'data.projects'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProjects' needs the current value of 'data.projects'.",["336"],"'getDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'clients'. Either include it or remove the dependency array.",["337"],"React Hook useEffect has a missing dependency: 'data.users'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setStudents' needs the current value of 'data.users'.",["338"],"'useState' is defined but never used.","'isFocused' is assigned a value but never used.","'hasValue' is assigned a value but never used.","'handleFocus' is assigned a value but never used.","'handleBlur' is assigned a value but never used.","'selectedDate' is assigned a value but never used.","'handleDateChange' is defined but never used.","'ErrorMessagePopup' is defined but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogActions' is defined but never used.","'Button' is defined but never used.","'Search' is assigned a value but never used.","'SearchIconWrapper' is assigned a value but never used.","'StyledInputBase' is assigned a value but never used.","'HoverTableRow' is assigned a value but never used.","'selectedStudent' is assigned a value but never used.","'setSelectedStudent' is assigned a value but never used.","'searchName' is assigned a value but never used.","'setSearchName' is assigned a value but never used.","'filteredStudents' is assigned a value but never used.","'setFilteredStudents' is assigned a value but never used.",{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},"Update the dependencies array to be: [navigate, role]",{"range":"351","text":"352"},"Update the dependencies array to be: [checkSignedIn, name, navigate, role]",{"range":"353","text":"354"},"Update the dependencies array to be: [isAdmin]",{"range":"355","text":"356"},"Update the dependencies array to be: [projects, searchName, course, data.projects]",{"range":"357","text":"358"},"Update the dependencies array to be: [clients]",{"range":"359","text":"360"},"Update the dependencies array to be: [students, searchName, course, data.users]",{"range":"361","text":"362"},[694,696],"[navigate, role]",[1754,1766],"[checkSignedIn, name, navigate, role]",[1203,1205],"[isAdmin]",[4606,4636],"[projects, searchName, course, data.projects]",[4143,4145],"[clients]",[4884,4914],"[students, searchName, course, data.users]"]